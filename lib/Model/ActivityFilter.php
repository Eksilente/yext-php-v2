<?php
/**
 * ActivityFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yext\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yext API
 *
 * 
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yext\Client\Model;

use \ArrayAccess;

/**
 * ActivityFilter Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Yext\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ActivityFilter implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ActivityFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => '\DateTime',
        'location_ids' => 'string[]',
        'activity_types' => 'string[]',
        'end_date' => '\DateTime',
        'actors' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'startDate',
        'location_ids' => 'locationIds',
        'activity_types' => 'activityTypes',
        'end_date' => 'endDate',
        'actors' => 'actors'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'location_ids' => 'setLocationIds',
        'activity_types' => 'setActivityTypes',
        'end_date' => 'setEndDate',
        'actors' => 'setActors'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'location_ids' => 'getLocationIds',
        'activity_types' => 'getActivityTypes',
        'end_date' => 'getEndDate',
        'actors' => 'getActors'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ACTIVITY_TYPES_LOCATION_UPDATED = 'LOCATION_UPDATED';
    const ACTIVITY_TYPES_PUBLISHER_SUGGESTION_CREATED = 'PUBLISHER_SUGGESTION_CREATED';
    const ACTIVITY_TYPES_PUBLISHER_SUGGESTION_APPROVED = 'PUBLISHER_SUGGESTION_APPROVED';
    const ACTIVITY_TYPES_PUBLISHER_SUGGESTION_REJECTED = 'PUBLISHER_SUGGESTION_REJECTED';
    const ACTIVITY_TYPES_PUBLISHER_SUGGESTION_EXPIRED = 'PUBLISHER_SUGGESTION_EXPIRED';
    const ACTIVITY_TYPES_REVIEW_CREATED = 'REVIEW_CREATED';
    const ACTIVITY_TYPES_REVIEW_RESPONDED = 'REVIEW_RESPONDED';
    const ACTIVITY_TYPES_SOCIAL_POST_CREATED = 'SOCIAL_POST_CREATED';
    const ACTIVITY_TYPES_SOCIAL_POST_UPDATED = 'SOCIAL_POST_UPDATED';
    const ACTIVITY_TYPES_SOCIAL_POST_COMMENT_CREATED = 'SOCIAL_POST_COMMENT_CREATED';
    const ACTIVITY_TYPES_SOCIAL_POST_COMMENT_UPDATED = 'SOCIAL_POST_COMMENT_UPDATED';
    const ACTIVITY_TYPES_LISTING_LIVE = 'LISTING_LIVE';
    const ACTIVITY_TYPES_DUPLICATE_DETECTED = 'DUPLICATE_DETECTED';
    const ACTIVITY_TYPES_DUPLICATE_SUPPRESSED = 'DUPLICATE_SUPPRESSED';
    const ACTIVITY_TYPES_DUPLICATE_IGNORED = 'DUPLICATE_IGNORED';
    const ACTORS_YEXT_SYSTEM = 'YEXT_SYSTEM';
    const ACTORS_YEXT_EMPLOYEE = 'YEXT_EMPLOYEE';
    const ACTORS_SCHEDULED_CONTENT = 'SCHEDULED_CONTENT';
    const ACTORS_API = 'API';
    const ACTORS_PUBLISHER = 'PUBLISHER';
    const ACTORS_CUSTOMER = 'CUSTOMER';
    const ACTORS_CONSUMER = 'CONSUMER';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getActivityTypesAllowableValues()
    {
        return [
            self::ACTIVITY_TYPES_LOCATION_UPDATED,
            self::ACTIVITY_TYPES_PUBLISHER_SUGGESTION_CREATED,
            self::ACTIVITY_TYPES_PUBLISHER_SUGGESTION_APPROVED,
            self::ACTIVITY_TYPES_PUBLISHER_SUGGESTION_REJECTED,
            self::ACTIVITY_TYPES_PUBLISHER_SUGGESTION_EXPIRED,
            self::ACTIVITY_TYPES_REVIEW_CREATED,
            self::ACTIVITY_TYPES_REVIEW_RESPONDED,
            self::ACTIVITY_TYPES_SOCIAL_POST_CREATED,
            self::ACTIVITY_TYPES_SOCIAL_POST_UPDATED,
            self::ACTIVITY_TYPES_SOCIAL_POST_COMMENT_CREATED,
            self::ACTIVITY_TYPES_SOCIAL_POST_COMMENT_UPDATED,
            self::ACTIVITY_TYPES_LISTING_LIVE,
            self::ACTIVITY_TYPES_DUPLICATE_DETECTED,
            self::ACTIVITY_TYPES_DUPLICATE_SUPPRESSED,
            self::ACTIVITY_TYPES_DUPLICATE_IGNORED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getActorsAllowableValues()
    {
        return [
            self::ACTORS_YEXT_SYSTEM,
            self::ACTORS_YEXT_EMPLOYEE,
            self::ACTORS_SCHEDULED_CONTENT,
            self::ACTORS_API,
            self::ACTORS_PUBLISHER,
            self::ACTORS_CUSTOMER,
            self::ACTORS_CONSUMER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['activity_types'] = isset($data['activity_types']) ? $data['activity_types'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['actors'] = isset($data['actors']) ? $data['actors'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date The inclusive start date for the activity data.
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets location_ids
     * @return string[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     * @param string[] $location_ids Array of locationIds
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets activity_types
     * @return string[]
     */
    public function getActivityTypes()
    {
        return $this->container['activity_types'];
    }

    /**
     * Sets activity_types
     * @param string[] $activity_types Activity types to include in an Activity list.
     * @return $this
     */
    public function setActivityTypes($activity_types)
    {
        $allowed_values = array('LOCATION_UPDATED', 'PUBLISHER_SUGGESTION_CREATED', 'PUBLISHER_SUGGESTION_APPROVED', 'PUBLISHER_SUGGESTION_REJECTED', 'PUBLISHER_SUGGESTION_EXPIRED', 'REVIEW_CREATED', 'REVIEW_RESPONDED', 'SOCIAL_POST_CREATED', 'SOCIAL_POST_UPDATED', 'SOCIAL_POST_COMMENT_CREATED', 'SOCIAL_POST_COMMENT_UPDATED', 'LISTING_LIVE', 'DUPLICATE_DETECTED', 'DUPLICATE_SUPPRESSED', 'DUPLICATE_IGNORED');
        if (!is_null($activity_types) && (array_diff($activity_types, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'activity_types', must be one of 'LOCATION_UPDATED', 'PUBLISHER_SUGGESTION_CREATED', 'PUBLISHER_SUGGESTION_APPROVED', 'PUBLISHER_SUGGESTION_REJECTED', 'PUBLISHER_SUGGESTION_EXPIRED', 'REVIEW_CREATED', 'REVIEW_RESPONDED', 'SOCIAL_POST_CREATED', 'SOCIAL_POST_UPDATED', 'SOCIAL_POST_COMMENT_CREATED', 'SOCIAL_POST_COMMENT_UPDATED', 'LISTING_LIVE', 'DUPLICATE_DETECTED', 'DUPLICATE_SUPPRESSED', 'DUPLICATE_IGNORED'");
        }
        $this->container['activity_types'] = $activity_types;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date The inclusive end date for the activity data.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets actors
     * @return string[]
     */
    public function getActors()
    {
        return $this->container['actors'];
    }

    /**
     * Sets actors
     * @param string[] $actors List of actors whose activities should be included in an Activity list.
     * @return $this
     */
    public function setActors($actors)
    {
        $allowed_values = array('YEXT_SYSTEM', 'YEXT_EMPLOYEE', 'SCHEDULED_CONTENT', 'API', 'PUBLISHER', 'CUSTOMER', 'CONSUMER');
        if (!is_null($actors) && (array_diff($actors, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'actors', must be one of 'YEXT_SYSTEM', 'YEXT_EMPLOYEE', 'SCHEDULED_CONTENT', 'API', 'PUBLISHER', 'CUSTOMER', 'CONSUMER'");
        }
        $this->container['actors'] = $actors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
