<?php
/**
 * AnalyticsFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yext\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yext API
 *
 * 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yext\Client\Model;

use \ArrayAccess;

/**
 * AnalyticsFilter Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Yext\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsFilter implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AnalyticsFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => '\DateTime',
        'location_labels' => 'string[]',
        'end_date' => '\DateTime',
        'instagram_content_type' => 'string',
        'google_action_type' => 'string[]',
        'google_query_type' => 'string[]',
        'platforms' => 'string[]',
        'search_term' => 'string',
        'partners' => 'float[]',
        'search_type' => 'string',
        'foursquare_checkin_age' => 'string',
        'frequent_words' => 'string[]',
        'foursquare_checkin_time_of_day' => 'string',
        'ratings' => 'int[]',
        'foursquare_checkin_gender' => 'string',
        'foursquare_checkin_type' => 'string',
        'hours' => 'float[]',
        'max_search_frequency' => 'double',
        'folder_id' => 'int',
        'location_ids' => 'string[]',
        'countries' => 'string[]',
        'min_search_frequency' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'startDate',
        'location_labels' => 'locationLabels',
        'end_date' => 'endDate',
        'instagram_content_type' => 'instagramContentType',
        'google_action_type' => 'googleActionType',
        'google_query_type' => 'googleQueryType',
        'platforms' => 'platforms',
        'search_term' => 'searchTerm',
        'partners' => 'partners',
        'search_type' => 'searchType',
        'foursquare_checkin_age' => 'foursquareCheckinAge',
        'frequent_words' => 'frequentWords',
        'foursquare_checkin_time_of_day' => 'foursquareCheckinTimeOfDay',
        'ratings' => 'ratings',
        'foursquare_checkin_gender' => 'foursquareCheckinGender',
        'foursquare_checkin_type' => 'foursquareCheckinType',
        'hours' => 'hours',
        'max_search_frequency' => 'maxSearchFrequency',
        'folder_id' => 'folderId',
        'location_ids' => 'locationIds',
        'countries' => 'countries',
        'min_search_frequency' => 'minSearchFrequency'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'location_labels' => 'setLocationLabels',
        'end_date' => 'setEndDate',
        'instagram_content_type' => 'setInstagramContentType',
        'google_action_type' => 'setGoogleActionType',
        'google_query_type' => 'setGoogleQueryType',
        'platforms' => 'setPlatforms',
        'search_term' => 'setSearchTerm',
        'partners' => 'setPartners',
        'search_type' => 'setSearchType',
        'foursquare_checkin_age' => 'setFoursquareCheckinAge',
        'frequent_words' => 'setFrequentWords',
        'foursquare_checkin_time_of_day' => 'setFoursquareCheckinTimeOfDay',
        'ratings' => 'setRatings',
        'foursquare_checkin_gender' => 'setFoursquareCheckinGender',
        'foursquare_checkin_type' => 'setFoursquareCheckinType',
        'hours' => 'setHours',
        'max_search_frequency' => 'setMaxSearchFrequency',
        'folder_id' => 'setFolderId',
        'location_ids' => 'setLocationIds',
        'countries' => 'setCountries',
        'min_search_frequency' => 'setMinSearchFrequency'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'location_labels' => 'getLocationLabels',
        'end_date' => 'getEndDate',
        'instagram_content_type' => 'getInstagramContentType',
        'google_action_type' => 'getGoogleActionType',
        'google_query_type' => 'getGoogleQueryType',
        'platforms' => 'getPlatforms',
        'search_term' => 'getSearchTerm',
        'partners' => 'getPartners',
        'search_type' => 'getSearchType',
        'foursquare_checkin_age' => 'getFoursquareCheckinAge',
        'frequent_words' => 'getFrequentWords',
        'foursquare_checkin_time_of_day' => 'getFoursquareCheckinTimeOfDay',
        'ratings' => 'getRatings',
        'foursquare_checkin_gender' => 'getFoursquareCheckinGender',
        'foursquare_checkin_type' => 'getFoursquareCheckinType',
        'hours' => 'getHours',
        'max_search_frequency' => 'getMaxSearchFrequency',
        'folder_id' => 'getFolderId',
        'location_ids' => 'getLocationIds',
        'countries' => 'getCountries',
        'min_search_frequency' => 'getMinSearchFrequency'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const GOOGLE_ACTION_TYPE_DRIVING_DIRECTIONS = 'ACTION_DRIVING_DIRECTIONS';
    const GOOGLE_ACTION_TYPE_PHONE = 'ACTION_PHONE';
    const GOOGLE_ACTION_TYPE_WEBSITE = 'ACTION_WEBSITE';
    const GOOGLE_QUERY_TYPE_DIRECT = 'QUERIES_DIRECT';
    const GOOGLE_QUERY_TYPE_INDIRECT = 'QUERIES_INDIRECT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGoogleActionTypeAllowableValues()
    {
        return [
            self::GOOGLE_ACTION_TYPE_DRIVING_DIRECTIONS,
            self::GOOGLE_ACTION_TYPE_PHONE,
            self::GOOGLE_ACTION_TYPE_WEBSITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGoogleQueryTypeAllowableValues()
    {
        return [
            self::GOOGLE_QUERY_TYPE_DIRECT,
            self::GOOGLE_QUERY_TYPE_INDIRECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['location_labels'] = isset($data['location_labels']) ? $data['location_labels'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['instagram_content_type'] = isset($data['instagram_content_type']) ? $data['instagram_content_type'] : null;
        $this->container['google_action_type'] = isset($data['google_action_type']) ? $data['google_action_type'] : null;
        $this->container['google_query_type'] = isset($data['google_query_type']) ? $data['google_query_type'] : null;
        $this->container['platforms'] = isset($data['platforms']) ? $data['platforms'] : null;
        $this->container['search_term'] = isset($data['search_term']) ? $data['search_term'] : null;
        $this->container['partners'] = isset($data['partners']) ? $data['partners'] : null;
        $this->container['search_type'] = isset($data['search_type']) ? $data['search_type'] : null;
        $this->container['foursquare_checkin_age'] = isset($data['foursquare_checkin_age']) ? $data['foursquare_checkin_age'] : null;
        $this->container['frequent_words'] = isset($data['frequent_words']) ? $data['frequent_words'] : null;
        $this->container['foursquare_checkin_time_of_day'] = isset($data['foursquare_checkin_time_of_day']) ? $data['foursquare_checkin_time_of_day'] : null;
        $this->container['ratings'] = isset($data['ratings']) ? $data['ratings'] : null;
        $this->container['foursquare_checkin_gender'] = isset($data['foursquare_checkin_gender']) ? $data['foursquare_checkin_gender'] : null;
        $this->container['foursquare_checkin_type'] = isset($data['foursquare_checkin_type']) ? $data['foursquare_checkin_type'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['max_search_frequency'] = isset($data['max_search_frequency']) ? $data['max_search_frequency'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['min_search_frequency'] = isset($data['min_search_frequency']) ? $data['min_search_frequency'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date The inclusive start date for the report data.  Defaults to 90 days before the end date. Must be before the date given in `endDate`. E.g. ‘2016-08-22’ NOTE: If `WEEKS`, `MONTHS`, or `MONTHS_RETAIL` is in dimensions, startDate must coincide with the beginning and end of a week or month, depending on the dimension chosen.
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets location_labels
     * @return string[]
     */
    public function getLocationLabels()
    {
        return $this->container['location_labels'];
    }

    /**
     * Sets location_labels
     * @param string[] $location_labels Array of location labels
     * @return $this
     */
    public function setLocationLabels($location_labels)
    {
        $this->container['location_labels'] = $location_labels;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date The exclusive end date for the report data.  Defaults to the lowest common denominator of the relevant maximum reporting dates. Must be after the date given in `startDate`. E.g. ‘2016-08-30’ NOTE: If `WEEKS`, `MONTHS`, or `MONTHS_RETAIL` is in dimensions, endDate must coincide with the beginning and end of a week or month, depending on the dimension chosen.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets instagram_content_type
     * @return string
     */
    public function getInstagramContentType()
    {
        return $this->container['instagram_content_type'];
    }

    /**
     * Sets instagram_content_type
     * @param string $instagram_content_type
     * @return $this
     */
    public function setInstagramContentType($instagram_content_type)
    {
        $this->container['instagram_content_type'] = $instagram_content_type;

        return $this;
    }

    /**
     * Gets google_action_type
     * @return string[]
     */
    public function getGoogleActionType()
    {
        return $this->container['google_action_type'];
    }

    /**
     * Sets google_action_type
     * @param string[] $google_action_type Specifies the type of customer actions to be included in the report. Can only be used with the `GOOGLE_CUSTOMER_ACTIONS` metric.
     * @return $this
     */
    public function setGoogleActionType($google_action_type)
    {
        $allowed_values = array('ACTION_DRIVING_DIRECTIONS', 'ACTION_PHONE', 'ACTION_WEBSITE');
        if (!is_null($google_action_type) && (array_diff($google_action_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'google_action_type', must be one of 'ACTION_DRIVING_DIRECTIONS', 'ACTION_PHONE', 'ACTION_WEBSITE'");
        }
        $this->container['google_action_type'] = $google_action_type;

        return $this;
    }

    /**
     * Gets google_query_type
     * @return string[]
     */
    public function getGoogleQueryType()
    {
        return $this->container['google_query_type'];
    }

    /**
     * Sets google_query_type
     * @param string[] $google_query_type Specifies the type of queries to be included in the report. Can only be used with the `GOOGLE_SEARCHES` metric.
     * @return $this
     */
    public function setGoogleQueryType($google_query_type)
    {
        $allowed_values = array('QUERIES_DIRECT', 'QUERIES_INDIRECT');
        if (!is_null($google_query_type) && (array_diff($google_query_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'google_query_type', must be one of 'QUERIES_DIRECT', 'QUERIES_INDIRECT'");
        }
        $this->container['google_query_type'] = $google_query_type;

        return $this;
    }

    /**
     * Gets platforms
     * @return string[]
     */
    public function getPlatforms()
    {
        return $this->container['platforms'];
    }

    /**
     * Sets platforms
     * @param string[] $platforms Array of platform IDs.
     * @return $this
     */
    public function setPlatforms($platforms)
    {
        $this->container['platforms'] = $platforms;

        return $this;
    }

    /**
     * Gets search_term
     * @return string
     */
    public function getSearchTerm()
    {
        return $this->container['search_term'];
    }

    /**
     * Sets search_term
     * @param string $search_term
     * @return $this
     */
    public function setSearchTerm($search_term)
    {
        $this->container['search_term'] = $search_term;

        return $this;
    }

    /**
     * Gets partners
     * @return float[]
     */
    public function getPartners()
    {
        return $this->container['partners'];
    }

    /**
     * Sets partners
     * @param float[] $partners Specifies the partners that should be included in the report. Can only be used with Reviews metrics.
     * @return $this
     */
    public function setPartners($partners)
    {
        $this->container['partners'] = $partners;

        return $this;
    }

    /**
     * Gets search_type
     * @return string
     */
    public function getSearchType()
    {
        return $this->container['search_type'];
    }

    /**
     * Sets search_type
     * @param string $search_type
     * @return $this
     */
    public function setSearchType($search_type)
    {
        $this->container['search_type'] = $search_type;

        return $this;
    }

    /**
     * Gets foursquare_checkin_age
     * @return string
     */
    public function getFoursquareCheckinAge()
    {
        return $this->container['foursquare_checkin_age'];
    }

    /**
     * Sets foursquare_checkin_age
     * @param string $foursquare_checkin_age
     * @return $this
     */
    public function setFoursquareCheckinAge($foursquare_checkin_age)
    {
        $this->container['foursquare_checkin_age'] = $foursquare_checkin_age;

        return $this;
    }

    /**
     * Gets frequent_words
     * @return string[]
     */
    public function getFrequentWords()
    {
        return $this->container['frequent_words'];
    }

    /**
     * Sets frequent_words
     * @param string[] $frequent_words Specifies the words that should be included in the report. Can only be used with Reviews metrics.
     * @return $this
     */
    public function setFrequentWords($frequent_words)
    {
        $this->container['frequent_words'] = $frequent_words;

        return $this;
    }

    /**
     * Gets foursquare_checkin_time_of_day
     * @return string
     */
    public function getFoursquareCheckinTimeOfDay()
    {
        return $this->container['foursquare_checkin_time_of_day'];
    }

    /**
     * Sets foursquare_checkin_time_of_day
     * @param string $foursquare_checkin_time_of_day
     * @return $this
     */
    public function setFoursquareCheckinTimeOfDay($foursquare_checkin_time_of_day)
    {
        $this->container['foursquare_checkin_time_of_day'] = $foursquare_checkin_time_of_day;

        return $this;
    }

    /**
     * Gets ratings
     * @return int[]
     */
    public function getRatings()
    {
        return $this->container['ratings'];
    }

    /**
     * Sets ratings
     * @param int[] $ratings Specifies the ratings to be included in the report. Can only be used with Reviews metrics.
     * @return $this
     */
    public function setRatings($ratings)
    {
        $this->container['ratings'] = $ratings;

        return $this;
    }

    /**
     * Gets foursquare_checkin_gender
     * @return string
     */
    public function getFoursquareCheckinGender()
    {
        return $this->container['foursquare_checkin_gender'];
    }

    /**
     * Sets foursquare_checkin_gender
     * @param string $foursquare_checkin_gender
     * @return $this
     */
    public function setFoursquareCheckinGender($foursquare_checkin_gender)
    {
        $this->container['foursquare_checkin_gender'] = $foursquare_checkin_gender;

        return $this;
    }

    /**
     * Gets foursquare_checkin_type
     * @return string
     */
    public function getFoursquareCheckinType()
    {
        return $this->container['foursquare_checkin_type'];
    }

    /**
     * Sets foursquare_checkin_type
     * @param string $foursquare_checkin_type
     * @return $this
     */
    public function setFoursquareCheckinType($foursquare_checkin_type)
    {
        $this->container['foursquare_checkin_type'] = $foursquare_checkin_type;

        return $this;
    }

    /**
     * Gets hours
     * @return float[]
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     * @param float[] $hours Specifies the hour(s) of day that should be included in the report. Can only, and must be used with the `GOOGLE_PHONE_CALLS` metric.
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets max_search_frequency
     * @return double
     */
    public function getMaxSearchFrequency()
    {
        return $this->container['max_search_frequency'];
    }

    /**
     * Sets max_search_frequency
     * @param double $max_search_frequency
     * @return $this
     */
    public function setMaxSearchFrequency($max_search_frequency)
    {
        $this->container['max_search_frequency'] = $max_search_frequency;

        return $this;
    }

    /**
     * Gets folder_id
     * @return int
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     * @param int $folder_id Specifies the folder whose locations and subfolders should be included in the results. Default is 0 (root folder). Cannot be used when `ACCOUNT_ID` is in dimensions.
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets location_ids
     * @return string[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     * @param string[] $location_ids Array of locationIds
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets countries
     * @return string[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     * @param string[] $countries Array of 3166 Alpha-2 country codes.
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets min_search_frequency
     * @return double
     */
    public function getMinSearchFrequency()
    {
        return $this->container['min_search_frequency'];
    }

    /**
     * Sets min_search_frequency
     * @param double $min_search_frequency
     * @return $this
     */
    public function setMinSearchFrequency($min_search_frequency)
    {
        $this->container['min_search_frequency'] = $min_search_frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
