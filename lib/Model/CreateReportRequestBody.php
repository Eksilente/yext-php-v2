<?php
/**
 * CreateReportRequestBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yext\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yext API
 *
 * 
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yext\Client\Model;

use \ArrayAccess;

/**
 * CreateReportRequestBody Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Yext\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateReportRequestBody implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreateReportRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'metrics' => 'string[]',
        'dimensions' => 'string[]',
        'filters' => '\Yext\Client\Model\AnalyticsFilter'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'metrics' => 'metrics',
        'dimensions' => 'dimensions',
        'filters' => 'filters'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'metrics' => 'setMetrics',
        'dimensions' => 'setDimensions',
        'filters' => 'setFilters'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'metrics' => 'getMetrics',
        'dimensions' => 'getDimensions',
        'filters' => 'getFilters'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const METRICS_PROFILE_VIEWS = 'PROFILE_VIEWS';
    const METRICS_SEARCHES = 'SEARCHES';
    const METRICS_POWERLISTINGS_LIVE = 'POWERLISTINGS_LIVE';
    const METRICS_FEATURED_MESSAGE_CLICKS = 'FEATURED_MESSAGE_CLICKS';
    const METRICS_YELP_PAGE_VIEWS = 'YELP_PAGE_VIEWS';
    const METRICS_BING_SEARCHES = 'BING_SEARCHES';
    const METRICS_FACEBOOK_LIKES = 'FACEBOOK_LIKES';
    const METRICS_FACEBOOK_TALKING_ABOUT = 'FACEBOOK_TALKING_ABOUT';
    const METRICS_FACEBOOK_WERE_HERE = 'FACEBOOK_WERE_HERE';
    const METRICS_FOURSQUARE_DAILY_CHECKINS = 'FOURSQUARE_DAILY_CHECKINS';
    const METRICS_INSTAGRAM_POSTS = 'INSTAGRAM_POSTS';
    const DIMENSIONS_ACCOUNT_IDS = 'ACCOUNT_IDS';
    const DIMENSIONS_LOCATION_IDS = 'LOCATION_IDS';
    const DIMENSIONS_FOLDER_IDS = 'FOLDER_IDS';
    const DIMENSIONS_LOCATION_NAMES = 'LOCATION_NAMES';
    const DIMENSIONS_FOLDER_NAMES = 'FOLDER_NAMES';
    const DIMENSIONS_DAYS = 'DAYS';
    const DIMENSIONS_WEEKS = 'WEEKS';
    const DIMENSIONS_MONTHS = 'MONTHS';
    const DIMENSIONS_MONTHS_RETAIL = 'MONTHS_RETAIL';
    const DIMENSIONS_PLATFORM = 'PLATFORM';
    const DIMENSIONS_FOURSQUARE_GENDER = 'FOURSQUARE_GENDER';
    const DIMENSIONS_FOURSQUARE_AGE = 'FOURSQUARE_AGE';
    const DIMENSIONS_FOURSQUARE_TIME = 'FOURSQUARE_TIME';
    const DIMENSIONS_SEARCH_QUERY = 'SEARCH_QUERY';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMetricsAllowableValues()
    {
        return [
            self::METRICS_PROFILE_VIEWS,
            self::METRICS_SEARCHES,
            self::METRICS_POWERLISTINGS_LIVE,
            self::METRICS_FEATURED_MESSAGE_CLICKS,
            self::METRICS_YELP_PAGE_VIEWS,
            self::METRICS_BING_SEARCHES,
            self::METRICS_FACEBOOK_LIKES,
            self::METRICS_FACEBOOK_TALKING_ABOUT,
            self::METRICS_FACEBOOK_WERE_HERE,
            self::METRICS_FOURSQUARE_DAILY_CHECKINS,
            self::METRICS_INSTAGRAM_POSTS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDimensionsAllowableValues()
    {
        return [
            self::DIMENSIONS_ACCOUNT_IDS,
            self::DIMENSIONS_LOCATION_IDS,
            self::DIMENSIONS_FOLDER_IDS,
            self::DIMENSIONS_LOCATION_NAMES,
            self::DIMENSIONS_FOLDER_NAMES,
            self::DIMENSIONS_DAYS,
            self::DIMENSIONS_WEEKS,
            self::DIMENSIONS_MONTHS,
            self::DIMENSIONS_MONTHS_RETAIL,
            self::DIMENSIONS_PLATFORM,
            self::DIMENSIONS_FOURSQUARE_GENDER,
            self::DIMENSIONS_FOURSQUARE_AGE,
            self::DIMENSIONS_FOURSQUARE_TIME,
            self::DIMENSIONS_SEARCH_QUERY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['metrics'] === null) {
            $invalid_properties[] = "'metrics' can't be null";
        }
        if ($this->container['dimensions'] === null) {
            $invalid_properties[] = "'dimensions' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['metrics'] === null) {
            return false;
        }
        if ($this->container['dimensions'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets metrics
     * @return string[]
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     * @param string[] $metrics The kinds of data the report should include. Specify up to 10 values.
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $allowed_values = array('PROFILE_VIEWS', 'SEARCHES', 'POWERLISTINGS_LIVE', 'FEATURED_MESSAGE_CLICKS', 'YELP_PAGE_VIEWS', 'BING_SEARCHES', 'FACEBOOK_LIKES', 'FACEBOOK_TALKING_ABOUT', 'FACEBOOK_WERE_HERE', 'FOURSQUARE_DAILY_CHECKINS', 'INSTAGRAM_POSTS');
        if ((array_diff($metrics, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'metrics', must be one of 'PROFILE_VIEWS', 'SEARCHES', 'POWERLISTINGS_LIVE', 'FEATURED_MESSAGE_CLICKS', 'YELP_PAGE_VIEWS', 'BING_SEARCHES', 'FACEBOOK_LIKES', 'FACEBOOK_TALKING_ABOUT', 'FACEBOOK_WERE_HERE', 'FOURSQUARE_DAILY_CHECKINS', 'INSTAGRAM_POSTS'");
        }
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets dimensions
     * @return string[]
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     * @param string[] $dimensions The kinds of data the report should include. Specify up to 3 values.
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $allowed_values = array('ACCOUNT_IDS', 'LOCATION_IDS', 'FOLDER_IDS', 'LOCATION_NAMES', 'FOLDER_NAMES', 'DAYS', 'WEEKS', 'MONTHS', 'MONTHS_RETAIL', 'PLATFORM', 'FOURSQUARE_GENDER', 'FOURSQUARE_AGE', 'FOURSQUARE_TIME', 'SEARCH_QUERY');
        if ((array_diff($dimensions, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'dimensions', must be one of 'ACCOUNT_IDS', 'LOCATION_IDS', 'FOLDER_IDS', 'LOCATION_NAMES', 'FOLDER_NAMES', 'DAYS', 'WEEKS', 'MONTHS', 'MONTHS_RETAIL', 'PLATFORM', 'FOURSQUARE_GENDER', 'FOURSQUARE_AGE', 'FOURSQUARE_TIME', 'SEARCH_QUERY'");
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets filters
     * @return \Yext\Client\Model\AnalyticsFilter
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     * @param \Yext\Client\Model\AnalyticsFilter $filters
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
