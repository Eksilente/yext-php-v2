<?php
/**
 * Location
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yext\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yext API
 *
 * 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yext\Client\Model;

use \ArrayAccess;

/**
 * Location Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Yext\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Location implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fax_phone' => 'string',
        'headshot' => 'object',
        'keywords' => 'string[]',
        'toll_free_phone' => 'string',
        'menu_ids' => 'string[]',
        'tracking_sites' => 'string[]',
        'middle_name' => 'string',
        'additional_hours_text' => 'string',
        'featured_message_url' => 'string',
        'reservation_url' => 'string',
        'degrees' => 'string[]',
        'label_ids' => 'string[]',
        'google_preferred_photo' => 'string',
        'video_urls' => 'string[]',
        'featured_message' => 'string',
        'yext_display_lat' => 'double',
        'mobile_phone' => 'string',
        'service_area' => '\Yext\Client\Model\LocationServiceArea',
        'timestamp' => 'int',
        'address2' => 'string',
        'facebook_cover_photo' => 'object',
        'yext_walkable_lat' => 'double',
        'bio_list_ids' => 'string[]',
        'facebook_page_url' => 'string',
        'emails' => 'string[]',
        'walkable_lng' => 'double',
        'gender' => 'string',
        'website_url' => 'string',
        'specialties' => 'string[]',
        'bio_lists_label' => 'string',
        'display_lng' => 'double',
        'yext_pickup_lng' => 'double',
        'product_list_ids' => 'string[]',
        'google_cover_photo' => 'object',
        'education_list' => '\Yext\Client\Model\LocationEducationList[]',
        'pickup_lat' => 'double',
        'logo' => '\Yext\Client\Model\LocationPhoto',
        'alternate_phone' => 'string',
        'account_id' => 'string',
        'menu_url' => 'string',
        'accepting_new_patients' => 'bool',
        'display_website_url' => 'string',
        'yext_routable_lng' => 'double',
        'state' => 'string',
        'suppress_address' => 'bool',
        'closed' => '\Yext\Client\Model\LocationClosed',
        'display_menu_url' => 'string',
        'office_name' => 'string',
        'yext_dropoff_lat' => 'double',
        'hours' => 'string',
        'address' => 'string',
        'uber_link' => 'string',
        'uber_client_id' => 'string',
        'facebook_profile_picture' => 'object',
        'certifications' => 'string[]',
        'language' => 'string',
        'last_name' => 'string',
        'location_name' => 'string',
        'query_templates' => 'string[]',
        'products' => 'string[]',
        'uber_link_text' => 'string',
        'google_attributes' => '\Yext\Client\Model\LocationGoogleAttributes[]',
        'payment_options' => 'string[]',
        'custom_keywords' => 'string[]',
        'dropoff_lng' => 'double',
        'intelligent_search_tracking_enabled' => 'bool',
        'uber_embed_code' => 'string',
        'display_reservation_url' => 'string',
        'yext_display_lng' => 'double',
        'display_address' => 'string',
        'category_ids' => 'string[]',
        'product_lists_label' => 'string',
        'city' => 'string',
        'menus_label' => 'string',
        'zip' => 'string',
        'local_phone' => 'string',
        'order_url' => 'string',
        'dropoff_lat' => 'double',
        'conditions_treated' => 'string[]',
        'pickup_lng' => 'double',
        'custom_fields' => 'map[string,object]',
        'walkable_lat' => 'double',
        'insurance_accepted' => 'string[]',
        'uber_link_type' => 'string',
        'phone' => 'string',
        'folder_id' => 'string',
        'google_profile_photo' => 'object',
        'instagram_handle' => 'string',
        'event_lists_label' => 'string',
        'holiday_hours' => '\Yext\Client\Model\LocationHolidayHours[]',
        'first_name' => 'string',
        'languages' => 'string[]',
        'location_type' => '\Yext\Client\Model\LocationType',
        'admitting_hospitals' => 'string[]',
        'year_established' => 'string',
        'yext_walkable_lng' => 'double',
        'associations' => 'string[]',
        'routable_lng' => 'double',
        'country_code' => 'string',
        'yext_pickup_lat' => 'double',
        'location_keywords' => 'string[]',
        'google_website_override' => 'string',
        'id' => 'string',
        'alternate_websites' => 'string[]',
        'intelligent_search_tracking_frequency' => 'string',
        'event_list_ids' => 'string[]',
        'display_lat' => 'double',
        'competitors' => '\Yext\Client\Model\LocationCompetitors[]',
        'yext_dropoff_lng' => 'double',
        'is_phone_tracked' => 'bool',
        'tty_phone' => 'string',
        'npi' => 'string',
        'description' => 'string',
        'twitter_handle' => 'string',
        'brands' => 'string[]',
        'uber_trip_branding_url' => 'string',
        'routable_lat' => 'double',
        'yext_routable_lat' => 'double',
        'alternate_names' => 'string[]',
        'photos' => '\Yext\Client\Model\LocationPhoto[]',
        'display_order_url' => 'string',
        'services' => 'string[]',
        'sublocality' => 'string',
        'uber_trip_branding_text' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'fax_phone' => 'faxPhone',
        'headshot' => 'headshot',
        'keywords' => 'keywords',
        'toll_free_phone' => 'tollFreePhone',
        'menu_ids' => 'menuIds',
        'tracking_sites' => 'trackingSites',
        'middle_name' => 'middleName',
        'additional_hours_text' => 'additionalHoursText',
        'featured_message_url' => 'featuredMessageUrl',
        'reservation_url' => 'reservationUrl',
        'degrees' => 'degrees',
        'label_ids' => 'labelIds',
        'google_preferred_photo' => 'googlePreferredPhoto',
        'video_urls' => 'videoUrls',
        'featured_message' => 'featuredMessage',
        'yext_display_lat' => 'yextDisplayLat',
        'mobile_phone' => 'mobilePhone',
        'service_area' => 'serviceArea',
        'timestamp' => 'timestamp',
        'address2' => 'address2',
        'facebook_cover_photo' => 'facebookCoverPhoto',
        'yext_walkable_lat' => 'yextWalkableLat',
        'bio_list_ids' => 'bioListIds',
        'facebook_page_url' => 'facebookPageUrl',
        'emails' => 'emails',
        'walkable_lng' => 'walkableLng',
        'gender' => 'gender',
        'website_url' => 'websiteUrl',
        'specialties' => 'specialties',
        'bio_lists_label' => 'bioListsLabel',
        'display_lng' => 'displayLng',
        'yext_pickup_lng' => 'yextPickupLng',
        'product_list_ids' => 'productListIds',
        'google_cover_photo' => 'googleCoverPhoto',
        'education_list' => 'educationList',
        'pickup_lat' => 'pickupLat',
        'logo' => 'logo',
        'alternate_phone' => 'alternatePhone',
        'account_id' => 'accountId',
        'menu_url' => 'menuUrl',
        'accepting_new_patients' => 'acceptingNewPatients',
        'display_website_url' => 'displayWebsiteUrl',
        'yext_routable_lng' => 'yextRoutableLng',
        'state' => 'state',
        'suppress_address' => 'suppressAddress',
        'closed' => 'closed',
        'display_menu_url' => 'displayMenuUrl',
        'office_name' => 'officeName',
        'yext_dropoff_lat' => 'yextDropoffLat',
        'hours' => 'hours',
        'address' => 'address',
        'uber_link' => 'uberLink',
        'uber_client_id' => 'uberClientId',
        'facebook_profile_picture' => 'facebookProfilePicture',
        'certifications' => 'certifications',
        'language' => 'language',
        'last_name' => 'lastName',
        'location_name' => 'locationName',
        'query_templates' => 'queryTemplates',
        'products' => 'products',
        'uber_link_text' => 'uberLinkText',
        'google_attributes' => 'googleAttributes',
        'payment_options' => 'paymentOptions',
        'custom_keywords' => 'customKeywords',
        'dropoff_lng' => 'dropoffLng',
        'intelligent_search_tracking_enabled' => 'intelligentSearchTrackingEnabled',
        'uber_embed_code' => 'uberEmbedCode',
        'display_reservation_url' => 'displayReservationUrl',
        'yext_display_lng' => 'yextDisplayLng',
        'display_address' => 'displayAddress',
        'category_ids' => 'categoryIds',
        'product_lists_label' => 'productListsLabel',
        'city' => 'city',
        'menus_label' => 'menusLabel',
        'zip' => 'zip',
        'local_phone' => 'localPhone',
        'order_url' => 'orderUrl',
        'dropoff_lat' => 'dropoffLat',
        'conditions_treated' => 'conditionsTreated',
        'pickup_lng' => 'pickupLng',
        'custom_fields' => 'customFields',
        'walkable_lat' => 'walkableLat',
        'insurance_accepted' => 'insuranceAccepted',
        'uber_link_type' => 'uberLinkType',
        'phone' => 'phone',
        'folder_id' => 'folderId',
        'google_profile_photo' => 'googleProfilePhoto',
        'instagram_handle' => 'instagramHandle',
        'event_lists_label' => 'eventListsLabel',
        'holiday_hours' => 'holidayHours',
        'first_name' => 'firstName',
        'languages' => 'languages',
        'location_type' => 'locationType',
        'admitting_hospitals' => 'admittingHospitals',
        'year_established' => 'yearEstablished',
        'yext_walkable_lng' => 'yextWalkableLng',
        'associations' => 'associations',
        'routable_lng' => 'routableLng',
        'country_code' => 'countryCode',
        'yext_pickup_lat' => 'yextPickupLat',
        'location_keywords' => 'locationKeywords',
        'google_website_override' => 'googleWebsiteOverride',
        'id' => 'id',
        'alternate_websites' => 'alternateWebsites',
        'intelligent_search_tracking_frequency' => 'intelligentSearchTrackingFrequency',
        'event_list_ids' => 'eventListIds',
        'display_lat' => 'displayLat',
        'competitors' => 'competitors',
        'yext_dropoff_lng' => 'yextDropoffLng',
        'is_phone_tracked' => 'isPhoneTracked',
        'tty_phone' => 'ttyPhone',
        'npi' => 'npi',
        'description' => 'description',
        'twitter_handle' => 'twitterHandle',
        'brands' => 'brands',
        'uber_trip_branding_url' => 'uberTripBrandingUrl',
        'routable_lat' => 'routableLat',
        'yext_routable_lat' => 'yextRoutableLat',
        'alternate_names' => 'alternateNames',
        'photos' => 'photos',
        'display_order_url' => 'displayOrderUrl',
        'services' => 'services',
        'sublocality' => 'sublocality',
        'uber_trip_branding_text' => 'uberTripBrandingText'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'fax_phone' => 'setFaxPhone',
        'headshot' => 'setHeadshot',
        'keywords' => 'setKeywords',
        'toll_free_phone' => 'setTollFreePhone',
        'menu_ids' => 'setMenuIds',
        'tracking_sites' => 'setTrackingSites',
        'middle_name' => 'setMiddleName',
        'additional_hours_text' => 'setAdditionalHoursText',
        'featured_message_url' => 'setFeaturedMessageUrl',
        'reservation_url' => 'setReservationUrl',
        'degrees' => 'setDegrees',
        'label_ids' => 'setLabelIds',
        'google_preferred_photo' => 'setGooglePreferredPhoto',
        'video_urls' => 'setVideoUrls',
        'featured_message' => 'setFeaturedMessage',
        'yext_display_lat' => 'setYextDisplayLat',
        'mobile_phone' => 'setMobilePhone',
        'service_area' => 'setServiceArea',
        'timestamp' => 'setTimestamp',
        'address2' => 'setAddress2',
        'facebook_cover_photo' => 'setFacebookCoverPhoto',
        'yext_walkable_lat' => 'setYextWalkableLat',
        'bio_list_ids' => 'setBioListIds',
        'facebook_page_url' => 'setFacebookPageUrl',
        'emails' => 'setEmails',
        'walkable_lng' => 'setWalkableLng',
        'gender' => 'setGender',
        'website_url' => 'setWebsiteUrl',
        'specialties' => 'setSpecialties',
        'bio_lists_label' => 'setBioListsLabel',
        'display_lng' => 'setDisplayLng',
        'yext_pickup_lng' => 'setYextPickupLng',
        'product_list_ids' => 'setProductListIds',
        'google_cover_photo' => 'setGoogleCoverPhoto',
        'education_list' => 'setEducationList',
        'pickup_lat' => 'setPickupLat',
        'logo' => 'setLogo',
        'alternate_phone' => 'setAlternatePhone',
        'account_id' => 'setAccountId',
        'menu_url' => 'setMenuUrl',
        'accepting_new_patients' => 'setAcceptingNewPatients',
        'display_website_url' => 'setDisplayWebsiteUrl',
        'yext_routable_lng' => 'setYextRoutableLng',
        'state' => 'setState',
        'suppress_address' => 'setSuppressAddress',
        'closed' => 'setClosed',
        'display_menu_url' => 'setDisplayMenuUrl',
        'office_name' => 'setOfficeName',
        'yext_dropoff_lat' => 'setYextDropoffLat',
        'hours' => 'setHours',
        'address' => 'setAddress',
        'uber_link' => 'setUberLink',
        'uber_client_id' => 'setUberClientId',
        'facebook_profile_picture' => 'setFacebookProfilePicture',
        'certifications' => 'setCertifications',
        'language' => 'setLanguage',
        'last_name' => 'setLastName',
        'location_name' => 'setLocationName',
        'query_templates' => 'setQueryTemplates',
        'products' => 'setProducts',
        'uber_link_text' => 'setUberLinkText',
        'google_attributes' => 'setGoogleAttributes',
        'payment_options' => 'setPaymentOptions',
        'custom_keywords' => 'setCustomKeywords',
        'dropoff_lng' => 'setDropoffLng',
        'intelligent_search_tracking_enabled' => 'setIntelligentSearchTrackingEnabled',
        'uber_embed_code' => 'setUberEmbedCode',
        'display_reservation_url' => 'setDisplayReservationUrl',
        'yext_display_lng' => 'setYextDisplayLng',
        'display_address' => 'setDisplayAddress',
        'category_ids' => 'setCategoryIds',
        'product_lists_label' => 'setProductListsLabel',
        'city' => 'setCity',
        'menus_label' => 'setMenusLabel',
        'zip' => 'setZip',
        'local_phone' => 'setLocalPhone',
        'order_url' => 'setOrderUrl',
        'dropoff_lat' => 'setDropoffLat',
        'conditions_treated' => 'setConditionsTreated',
        'pickup_lng' => 'setPickupLng',
        'custom_fields' => 'setCustomFields',
        'walkable_lat' => 'setWalkableLat',
        'insurance_accepted' => 'setInsuranceAccepted',
        'uber_link_type' => 'setUberLinkType',
        'phone' => 'setPhone',
        'folder_id' => 'setFolderId',
        'google_profile_photo' => 'setGoogleProfilePhoto',
        'instagram_handle' => 'setInstagramHandle',
        'event_lists_label' => 'setEventListsLabel',
        'holiday_hours' => 'setHolidayHours',
        'first_name' => 'setFirstName',
        'languages' => 'setLanguages',
        'location_type' => 'setLocationType',
        'admitting_hospitals' => 'setAdmittingHospitals',
        'year_established' => 'setYearEstablished',
        'yext_walkable_lng' => 'setYextWalkableLng',
        'associations' => 'setAssociations',
        'routable_lng' => 'setRoutableLng',
        'country_code' => 'setCountryCode',
        'yext_pickup_lat' => 'setYextPickupLat',
        'location_keywords' => 'setLocationKeywords',
        'google_website_override' => 'setGoogleWebsiteOverride',
        'id' => 'setId',
        'alternate_websites' => 'setAlternateWebsites',
        'intelligent_search_tracking_frequency' => 'setIntelligentSearchTrackingFrequency',
        'event_list_ids' => 'setEventListIds',
        'display_lat' => 'setDisplayLat',
        'competitors' => 'setCompetitors',
        'yext_dropoff_lng' => 'setYextDropoffLng',
        'is_phone_tracked' => 'setIsPhoneTracked',
        'tty_phone' => 'setTtyPhone',
        'npi' => 'setNpi',
        'description' => 'setDescription',
        'twitter_handle' => 'setTwitterHandle',
        'brands' => 'setBrands',
        'uber_trip_branding_url' => 'setUberTripBrandingUrl',
        'routable_lat' => 'setRoutableLat',
        'yext_routable_lat' => 'setYextRoutableLat',
        'alternate_names' => 'setAlternateNames',
        'photos' => 'setPhotos',
        'display_order_url' => 'setDisplayOrderUrl',
        'services' => 'setServices',
        'sublocality' => 'setSublocality',
        'uber_trip_branding_text' => 'setUberTripBrandingText'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'fax_phone' => 'getFaxPhone',
        'headshot' => 'getHeadshot',
        'keywords' => 'getKeywords',
        'toll_free_phone' => 'getTollFreePhone',
        'menu_ids' => 'getMenuIds',
        'tracking_sites' => 'getTrackingSites',
        'middle_name' => 'getMiddleName',
        'additional_hours_text' => 'getAdditionalHoursText',
        'featured_message_url' => 'getFeaturedMessageUrl',
        'reservation_url' => 'getReservationUrl',
        'degrees' => 'getDegrees',
        'label_ids' => 'getLabelIds',
        'google_preferred_photo' => 'getGooglePreferredPhoto',
        'video_urls' => 'getVideoUrls',
        'featured_message' => 'getFeaturedMessage',
        'yext_display_lat' => 'getYextDisplayLat',
        'mobile_phone' => 'getMobilePhone',
        'service_area' => 'getServiceArea',
        'timestamp' => 'getTimestamp',
        'address2' => 'getAddress2',
        'facebook_cover_photo' => 'getFacebookCoverPhoto',
        'yext_walkable_lat' => 'getYextWalkableLat',
        'bio_list_ids' => 'getBioListIds',
        'facebook_page_url' => 'getFacebookPageUrl',
        'emails' => 'getEmails',
        'walkable_lng' => 'getWalkableLng',
        'gender' => 'getGender',
        'website_url' => 'getWebsiteUrl',
        'specialties' => 'getSpecialties',
        'bio_lists_label' => 'getBioListsLabel',
        'display_lng' => 'getDisplayLng',
        'yext_pickup_lng' => 'getYextPickupLng',
        'product_list_ids' => 'getProductListIds',
        'google_cover_photo' => 'getGoogleCoverPhoto',
        'education_list' => 'getEducationList',
        'pickup_lat' => 'getPickupLat',
        'logo' => 'getLogo',
        'alternate_phone' => 'getAlternatePhone',
        'account_id' => 'getAccountId',
        'menu_url' => 'getMenuUrl',
        'accepting_new_patients' => 'getAcceptingNewPatients',
        'display_website_url' => 'getDisplayWebsiteUrl',
        'yext_routable_lng' => 'getYextRoutableLng',
        'state' => 'getState',
        'suppress_address' => 'getSuppressAddress',
        'closed' => 'getClosed',
        'display_menu_url' => 'getDisplayMenuUrl',
        'office_name' => 'getOfficeName',
        'yext_dropoff_lat' => 'getYextDropoffLat',
        'hours' => 'getHours',
        'address' => 'getAddress',
        'uber_link' => 'getUberLink',
        'uber_client_id' => 'getUberClientId',
        'facebook_profile_picture' => 'getFacebookProfilePicture',
        'certifications' => 'getCertifications',
        'language' => 'getLanguage',
        'last_name' => 'getLastName',
        'location_name' => 'getLocationName',
        'query_templates' => 'getQueryTemplates',
        'products' => 'getProducts',
        'uber_link_text' => 'getUberLinkText',
        'google_attributes' => 'getGoogleAttributes',
        'payment_options' => 'getPaymentOptions',
        'custom_keywords' => 'getCustomKeywords',
        'dropoff_lng' => 'getDropoffLng',
        'intelligent_search_tracking_enabled' => 'getIntelligentSearchTrackingEnabled',
        'uber_embed_code' => 'getUberEmbedCode',
        'display_reservation_url' => 'getDisplayReservationUrl',
        'yext_display_lng' => 'getYextDisplayLng',
        'display_address' => 'getDisplayAddress',
        'category_ids' => 'getCategoryIds',
        'product_lists_label' => 'getProductListsLabel',
        'city' => 'getCity',
        'menus_label' => 'getMenusLabel',
        'zip' => 'getZip',
        'local_phone' => 'getLocalPhone',
        'order_url' => 'getOrderUrl',
        'dropoff_lat' => 'getDropoffLat',
        'conditions_treated' => 'getConditionsTreated',
        'pickup_lng' => 'getPickupLng',
        'custom_fields' => 'getCustomFields',
        'walkable_lat' => 'getWalkableLat',
        'insurance_accepted' => 'getInsuranceAccepted',
        'uber_link_type' => 'getUberLinkType',
        'phone' => 'getPhone',
        'folder_id' => 'getFolderId',
        'google_profile_photo' => 'getGoogleProfilePhoto',
        'instagram_handle' => 'getInstagramHandle',
        'event_lists_label' => 'getEventListsLabel',
        'holiday_hours' => 'getHolidayHours',
        'first_name' => 'getFirstName',
        'languages' => 'getLanguages',
        'location_type' => 'getLocationType',
        'admitting_hospitals' => 'getAdmittingHospitals',
        'year_established' => 'getYearEstablished',
        'yext_walkable_lng' => 'getYextWalkableLng',
        'associations' => 'getAssociations',
        'routable_lng' => 'getRoutableLng',
        'country_code' => 'getCountryCode',
        'yext_pickup_lat' => 'getYextPickupLat',
        'location_keywords' => 'getLocationKeywords',
        'google_website_override' => 'getGoogleWebsiteOverride',
        'id' => 'getId',
        'alternate_websites' => 'getAlternateWebsites',
        'intelligent_search_tracking_frequency' => 'getIntelligentSearchTrackingFrequency',
        'event_list_ids' => 'getEventListIds',
        'display_lat' => 'getDisplayLat',
        'competitors' => 'getCompetitors',
        'yext_dropoff_lng' => 'getYextDropoffLng',
        'is_phone_tracked' => 'getIsPhoneTracked',
        'tty_phone' => 'getTtyPhone',
        'npi' => 'getNpi',
        'description' => 'getDescription',
        'twitter_handle' => 'getTwitterHandle',
        'brands' => 'getBrands',
        'uber_trip_branding_url' => 'getUberTripBrandingUrl',
        'routable_lat' => 'getRoutableLat',
        'yext_routable_lat' => 'getYextRoutableLat',
        'alternate_names' => 'getAlternateNames',
        'photos' => 'getPhotos',
        'display_order_url' => 'getDisplayOrderUrl',
        'services' => 'getServices',
        'sublocality' => 'getSublocality',
        'uber_trip_branding_text' => 'getUberTripBrandingText'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TRACKING_SITES_GOOGLE_DESKTOP = 'GOOGLE_DESKTOP';
    const TRACKING_SITES_GOOGLE_MOBILE = 'GOOGLE_MOBILE';
    const TRACKING_SITES_BING_DESKTOP = 'BING_DESKTOP';
    const TRACKING_SITES_YAHOO_DESKTOP = 'YAHOO_DESKTOP';
    const GENDER_FEMALE = 'FEMALE';
    const GENDER_F = 'F';
    const GENDER_MALE = 'MALE';
    const GENDER_M = 'M';
    const GENDER_UNSPECIFIED = 'UNSPECIFIED';
    const QUERY_TEMPLATES_KEYWORD = 'KEYWORD';
    const QUERY_TEMPLATES_KEYWORD_ZIP = 'KEYWORD_ZIP';
    const QUERY_TEMPLATES_KEYWORD_CITY = 'KEYWORD_CITY';
    const QUERY_TEMPLATES_KEYWORD_IN_CITY = 'KEYWORD_IN_CITY';
    const QUERY_TEMPLATES_KEYWORD_NEAR_ME = 'KEYWORD_NEAR_ME';
    const QUERY_TEMPLATES_KEYWORD_CITY_STATE = 'KEYWORD_CITY_STATE';
    const UBER_LINK_TYPE_LINK = 'LINK';
    const UBER_LINK_TYPE_BUTTON = 'BUTTON';
    const LOCATION_KEYWORDS_NAME = 'NAME';
    const LOCATION_KEYWORDS_PRIMARY_CATEGORY = 'PRIMARY_CATEGORY';
    const INTELLIGENT_SEARCH_TRACKING_FREQUENCY_WEEKLY = 'WEEKLY';
    const INTELLIGENT_SEARCH_TRACKING_FREQUENCY_MONTHLY = 'MONTHLY';
    const INTELLIGENT_SEARCH_TRACKING_FREQUENCY_QUARTERLY = 'QUARTERLY';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTrackingSitesAllowableValues()
    {
        return [
            self::TRACKING_SITES_GOOGLE_DESKTOP,
            self::TRACKING_SITES_GOOGLE_MOBILE,
            self::TRACKING_SITES_BING_DESKTOP,
            self::TRACKING_SITES_YAHOO_DESKTOP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_FEMALE,
            self::GENDER_F,
            self::GENDER_MALE,
            self::GENDER_M,
            self::GENDER_UNSPECIFIED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getQueryTemplatesAllowableValues()
    {
        return [
            self::QUERY_TEMPLATES_KEYWORD,
            self::QUERY_TEMPLATES_KEYWORD_ZIP,
            self::QUERY_TEMPLATES_KEYWORD_CITY,
            self::QUERY_TEMPLATES_KEYWORD_IN_CITY,
            self::QUERY_TEMPLATES_KEYWORD_NEAR_ME,
            self::QUERY_TEMPLATES_KEYWORD_CITY_STATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUberLinkTypeAllowableValues()
    {
        return [
            self::UBER_LINK_TYPE_LINK,
            self::UBER_LINK_TYPE_BUTTON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLocationKeywordsAllowableValues()
    {
        return [
            self::LOCATION_KEYWORDS_NAME,
            self::LOCATION_KEYWORDS_PRIMARY_CATEGORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIntelligentSearchTrackingFrequencyAllowableValues()
    {
        return [
            self::INTELLIGENT_SEARCH_TRACKING_FREQUENCY_WEEKLY,
            self::INTELLIGENT_SEARCH_TRACKING_FREQUENCY_MONTHLY,
            self::INTELLIGENT_SEARCH_TRACKING_FREQUENCY_QUARTERLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fax_phone'] = isset($data['fax_phone']) ? $data['fax_phone'] : null;
        $this->container['headshot'] = isset($data['headshot']) ? $data['headshot'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['toll_free_phone'] = isset($data['toll_free_phone']) ? $data['toll_free_phone'] : null;
        $this->container['menu_ids'] = isset($data['menu_ids']) ? $data['menu_ids'] : null;
        $this->container['tracking_sites'] = isset($data['tracking_sites']) ? $data['tracking_sites'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['additional_hours_text'] = isset($data['additional_hours_text']) ? $data['additional_hours_text'] : null;
        $this->container['featured_message_url'] = isset($data['featured_message_url']) ? $data['featured_message_url'] : null;
        $this->container['reservation_url'] = isset($data['reservation_url']) ? $data['reservation_url'] : null;
        $this->container['degrees'] = isset($data['degrees']) ? $data['degrees'] : null;
        $this->container['label_ids'] = isset($data['label_ids']) ? $data['label_ids'] : null;
        $this->container['google_preferred_photo'] = isset($data['google_preferred_photo']) ? $data['google_preferred_photo'] : null;
        $this->container['video_urls'] = isset($data['video_urls']) ? $data['video_urls'] : null;
        $this->container['featured_message'] = isset($data['featured_message']) ? $data['featured_message'] : null;
        $this->container['yext_display_lat'] = isset($data['yext_display_lat']) ? $data['yext_display_lat'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['service_area'] = isset($data['service_area']) ? $data['service_area'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['facebook_cover_photo'] = isset($data['facebook_cover_photo']) ? $data['facebook_cover_photo'] : null;
        $this->container['yext_walkable_lat'] = isset($data['yext_walkable_lat']) ? $data['yext_walkable_lat'] : null;
        $this->container['bio_list_ids'] = isset($data['bio_list_ids']) ? $data['bio_list_ids'] : null;
        $this->container['facebook_page_url'] = isset($data['facebook_page_url']) ? $data['facebook_page_url'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['walkable_lng'] = isset($data['walkable_lng']) ? $data['walkable_lng'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['specialties'] = isset($data['specialties']) ? $data['specialties'] : null;
        $this->container['bio_lists_label'] = isset($data['bio_lists_label']) ? $data['bio_lists_label'] : null;
        $this->container['display_lng'] = isset($data['display_lng']) ? $data['display_lng'] : null;
        $this->container['yext_pickup_lng'] = isset($data['yext_pickup_lng']) ? $data['yext_pickup_lng'] : null;
        $this->container['product_list_ids'] = isset($data['product_list_ids']) ? $data['product_list_ids'] : null;
        $this->container['google_cover_photo'] = isset($data['google_cover_photo']) ? $data['google_cover_photo'] : null;
        $this->container['education_list'] = isset($data['education_list']) ? $data['education_list'] : null;
        $this->container['pickup_lat'] = isset($data['pickup_lat']) ? $data['pickup_lat'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['alternate_phone'] = isset($data['alternate_phone']) ? $data['alternate_phone'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['menu_url'] = isset($data['menu_url']) ? $data['menu_url'] : null;
        $this->container['accepting_new_patients'] = isset($data['accepting_new_patients']) ? $data['accepting_new_patients'] : null;
        $this->container['display_website_url'] = isset($data['display_website_url']) ? $data['display_website_url'] : null;
        $this->container['yext_routable_lng'] = isset($data['yext_routable_lng']) ? $data['yext_routable_lng'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['suppress_address'] = isset($data['suppress_address']) ? $data['suppress_address'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['display_menu_url'] = isset($data['display_menu_url']) ? $data['display_menu_url'] : null;
        $this->container['office_name'] = isset($data['office_name']) ? $data['office_name'] : null;
        $this->container['yext_dropoff_lat'] = isset($data['yext_dropoff_lat']) ? $data['yext_dropoff_lat'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['uber_link'] = isset($data['uber_link']) ? $data['uber_link'] : null;
        $this->container['uber_client_id'] = isset($data['uber_client_id']) ? $data['uber_client_id'] : null;
        $this->container['facebook_profile_picture'] = isset($data['facebook_profile_picture']) ? $data['facebook_profile_picture'] : null;
        $this->container['certifications'] = isset($data['certifications']) ? $data['certifications'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['query_templates'] = isset($data['query_templates']) ? $data['query_templates'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['uber_link_text'] = isset($data['uber_link_text']) ? $data['uber_link_text'] : null;
        $this->container['google_attributes'] = isset($data['google_attributes']) ? $data['google_attributes'] : null;
        $this->container['payment_options'] = isset($data['payment_options']) ? $data['payment_options'] : null;
        $this->container['custom_keywords'] = isset($data['custom_keywords']) ? $data['custom_keywords'] : null;
        $this->container['dropoff_lng'] = isset($data['dropoff_lng']) ? $data['dropoff_lng'] : null;
        $this->container['intelligent_search_tracking_enabled'] = isset($data['intelligent_search_tracking_enabled']) ? $data['intelligent_search_tracking_enabled'] : null;
        $this->container['uber_embed_code'] = isset($data['uber_embed_code']) ? $data['uber_embed_code'] : null;
        $this->container['display_reservation_url'] = isset($data['display_reservation_url']) ? $data['display_reservation_url'] : null;
        $this->container['yext_display_lng'] = isset($data['yext_display_lng']) ? $data['yext_display_lng'] : null;
        $this->container['display_address'] = isset($data['display_address']) ? $data['display_address'] : null;
        $this->container['category_ids'] = isset($data['category_ids']) ? $data['category_ids'] : null;
        $this->container['product_lists_label'] = isset($data['product_lists_label']) ? $data['product_lists_label'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['menus_label'] = isset($data['menus_label']) ? $data['menus_label'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['local_phone'] = isset($data['local_phone']) ? $data['local_phone'] : null;
        $this->container['order_url'] = isset($data['order_url']) ? $data['order_url'] : null;
        $this->container['dropoff_lat'] = isset($data['dropoff_lat']) ? $data['dropoff_lat'] : null;
        $this->container['conditions_treated'] = isset($data['conditions_treated']) ? $data['conditions_treated'] : null;
        $this->container['pickup_lng'] = isset($data['pickup_lng']) ? $data['pickup_lng'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['walkable_lat'] = isset($data['walkable_lat']) ? $data['walkable_lat'] : null;
        $this->container['insurance_accepted'] = isset($data['insurance_accepted']) ? $data['insurance_accepted'] : null;
        $this->container['uber_link_type'] = isset($data['uber_link_type']) ? $data['uber_link_type'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['google_profile_photo'] = isset($data['google_profile_photo']) ? $data['google_profile_photo'] : null;
        $this->container['instagram_handle'] = isset($data['instagram_handle']) ? $data['instagram_handle'] : null;
        $this->container['event_lists_label'] = isset($data['event_lists_label']) ? $data['event_lists_label'] : null;
        $this->container['holiday_hours'] = isset($data['holiday_hours']) ? $data['holiday_hours'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['location_type'] = isset($data['location_type']) ? $data['location_type'] : null;
        $this->container['admitting_hospitals'] = isset($data['admitting_hospitals']) ? $data['admitting_hospitals'] : null;
        $this->container['year_established'] = isset($data['year_established']) ? $data['year_established'] : null;
        $this->container['yext_walkable_lng'] = isset($data['yext_walkable_lng']) ? $data['yext_walkable_lng'] : null;
        $this->container['associations'] = isset($data['associations']) ? $data['associations'] : null;
        $this->container['routable_lng'] = isset($data['routable_lng']) ? $data['routable_lng'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['yext_pickup_lat'] = isset($data['yext_pickup_lat']) ? $data['yext_pickup_lat'] : null;
        $this->container['location_keywords'] = isset($data['location_keywords']) ? $data['location_keywords'] : null;
        $this->container['google_website_override'] = isset($data['google_website_override']) ? $data['google_website_override'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['alternate_websites'] = isset($data['alternate_websites']) ? $data['alternate_websites'] : null;
        $this->container['intelligent_search_tracking_frequency'] = isset($data['intelligent_search_tracking_frequency']) ? $data['intelligent_search_tracking_frequency'] : null;
        $this->container['event_list_ids'] = isset($data['event_list_ids']) ? $data['event_list_ids'] : null;
        $this->container['display_lat'] = isset($data['display_lat']) ? $data['display_lat'] : null;
        $this->container['competitors'] = isset($data['competitors']) ? $data['competitors'] : null;
        $this->container['yext_dropoff_lng'] = isset($data['yext_dropoff_lng']) ? $data['yext_dropoff_lng'] : null;
        $this->container['is_phone_tracked'] = isset($data['is_phone_tracked']) ? $data['is_phone_tracked'] : null;
        $this->container['tty_phone'] = isset($data['tty_phone']) ? $data['tty_phone'] : null;
        $this->container['npi'] = isset($data['npi']) ? $data['npi'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['twitter_handle'] = isset($data['twitter_handle']) ? $data['twitter_handle'] : null;
        $this->container['brands'] = isset($data['brands']) ? $data['brands'] : null;
        $this->container['uber_trip_branding_url'] = isset($data['uber_trip_branding_url']) ? $data['uber_trip_branding_url'] : null;
        $this->container['routable_lat'] = isset($data['routable_lat']) ? $data['routable_lat'] : null;
        $this->container['yext_routable_lat'] = isset($data['yext_routable_lat']) ? $data['yext_routable_lat'] : null;
        $this->container['alternate_names'] = isset($data['alternate_names']) ? $data['alternate_names'] : null;
        $this->container['photos'] = isset($data['photos']) ? $data['photos'] : null;
        $this->container['display_order_url'] = isset($data['display_order_url']) ? $data['display_order_url'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['sublocality'] = isset($data['sublocality']) ? $data['sublocality'] : null;
        $this->container['uber_trip_branding_text'] = isset($data['uber_trip_branding_text']) ? $data['uber_trip_branding_text'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['additional_hours_text']) && (strlen($this->container['additional_hours_text']) > 255)) {
            $invalid_properties[] = "invalid value for 'additional_hours_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['featured_message_url']) && (strlen($this->container['featured_message_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'featured_message_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reservation_url']) && (strlen($this->container['reservation_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'reservation_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['featured_message']) && (strlen($this->container['featured_message']) > 50)) {
            $invalid_properties[] = "invalid value for 'featured_message', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address2']) && (strlen($this->container['address2']) > 255)) {
            $invalid_properties[] = "invalid value for 'address2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['facebook_page_url']) && (strlen($this->container['facebook_page_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'facebook_page_url', the character length must be smaller than or equal to 255.";
        }

        $allowed_values = ["FEMALE", "F", "MALE", "M", "UNSPECIFIED"];
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'gender', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['website_url']) && (strlen($this->container['website_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'website_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['account_id']) && (strlen($this->container['account_id']) > 50)) {
            $invalid_properties[] = "invalid value for 'account_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['menu_url']) && (strlen($this->container['menu_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'menu_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['display_website_url']) && (strlen($this->container['display_website_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'display_website_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['state']) && (strlen($this->container['state']) > 80)) {
            $invalid_properties[] = "invalid value for 'state', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['display_menu_url']) && (strlen($this->container['display_menu_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'display_menu_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['hours']) && (strlen($this->container['hours']) > 255)) {
            $invalid_properties[] = "invalid value for 'hours', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address']) && (strlen($this->container['address']) > 255)) {
            $invalid_properties[] = "invalid value for 'address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['language']) && (strlen($this->container['language']) > 10)) {
            $invalid_properties[] = "invalid value for 'language', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['location_name']) && (strlen($this->container['location_name']) > 100)) {
            $invalid_properties[] = "invalid value for 'location_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['uber_link_text']) && (strlen($this->container['uber_link_text']) > 100)) {
            $invalid_properties[] = "invalid value for 'uber_link_text', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['display_reservation_url']) && (strlen($this->container['display_reservation_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'display_reservation_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['display_address']) && (strlen($this->container['display_address']) > 255)) {
            $invalid_properties[] = "invalid value for 'display_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['city']) && (strlen($this->container['city']) > 80)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['zip']) && (strlen($this->container['zip']) > 10)) {
            $invalid_properties[] = "invalid value for 'zip', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['order_url']) && (strlen($this->container['order_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'order_url', the character length must be smaller than or equal to 255.";
        }

        $allowed_values = ["LINK", "BUTTON"];
        if (!is_null($this->container['uber_link_type']) && !in_array($this->container['uber_link_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'uber_link_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['year_established']) && (strlen($this->container['year_established']) > 4)) {
            $invalid_properties[] = "invalid value for 'year_established', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['country_code']) && (strlen($this->container['country_code']) > 2)) {
            $invalid_properties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['google_website_override']) && (strlen($this->container['google_website_override']) > 255)) {
            $invalid_properties[] = "invalid value for 'google_website_override', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['id']) && (strlen($this->container['id']) > 50)) {
            $invalid_properties[] = "invalid value for 'id', the character length must be smaller than or equal to 50.";
        }

        $allowed_values = ["WEEKLY", "MONTHLY", "QUARTERLY"];
        if (!is_null($this->container['intelligent_search_tracking_frequency']) && !in_array($this->container['intelligent_search_tracking_frequency'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'intelligent_search_tracking_frequency', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 5000)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['twitter_handle']) && (strlen($this->container['twitter_handle']) > 15)) {
            $invalid_properties[] = "invalid value for 'twitter_handle', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['display_order_url']) && (strlen($this->container['display_order_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'display_order_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sublocality']) && (strlen($this->container['sublocality']) > 255)) {
            $invalid_properties[] = "invalid value for 'sublocality', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['uber_trip_branding_text']) && (strlen($this->container['uber_trip_branding_text']) > 28)) {
            $invalid_properties[] = "invalid value for 'uber_trip_branding_text', the character length must be smaller than or equal to 28.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['additional_hours_text']) > 255) {
            return false;
        }
        if (strlen($this->container['featured_message_url']) > 255) {
            return false;
        }
        if (strlen($this->container['reservation_url']) > 255) {
            return false;
        }
        if (strlen($this->container['featured_message']) > 50) {
            return false;
        }
        if (strlen($this->container['address2']) > 255) {
            return false;
        }
        if (strlen($this->container['facebook_page_url']) > 255) {
            return false;
        }
        $allowed_values = ["FEMALE", "F", "MALE", "M", "UNSPECIFIED"];
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['website_url']) > 255) {
            return false;
        }
        if (strlen($this->container['account_id']) > 50) {
            return false;
        }
        if (strlen($this->container['menu_url']) > 255) {
            return false;
        }
        if (strlen($this->container['display_website_url']) > 255) {
            return false;
        }
        if (strlen($this->container['state']) > 80) {
            return false;
        }
        if (strlen($this->container['display_menu_url']) > 255) {
            return false;
        }
        if (strlen($this->container['hours']) > 255) {
            return false;
        }
        if (strlen($this->container['address']) > 255) {
            return false;
        }
        if (strlen($this->container['language']) > 10) {
            return false;
        }
        if (strlen($this->container['location_name']) > 100) {
            return false;
        }
        if (strlen($this->container['uber_link_text']) > 100) {
            return false;
        }
        if (strlen($this->container['display_reservation_url']) > 255) {
            return false;
        }
        if (strlen($this->container['display_address']) > 255) {
            return false;
        }
        if (strlen($this->container['city']) > 80) {
            return false;
        }
        if (strlen($this->container['zip']) > 10) {
            return false;
        }
        if (strlen($this->container['order_url']) > 255) {
            return false;
        }
        $allowed_values = ["LINK", "BUTTON"];
        if (!is_null($this->container['uber_link_type']) && !in_array($this->container['uber_link_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['year_established']) > 4) {
            return false;
        }
        if (strlen($this->container['country_code']) > 2) {
            return false;
        }
        if (strlen($this->container['google_website_override']) > 255) {
            return false;
        }
        if (strlen($this->container['id']) > 50) {
            return false;
        }
        $allowed_values = ["WEEKLY", "MONTHLY", "QUARTERLY"];
        if (!is_null($this->container['intelligent_search_tracking_frequency']) && !in_array($this->container['intelligent_search_tracking_frequency'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['description']) > 5000) {
            return false;
        }
        if (strlen($this->container['twitter_handle']) > 15) {
            return false;
        }
        if (strlen($this->container['display_order_url']) > 255) {
            return false;
        }
        if (strlen($this->container['sublocality']) > 255) {
            return false;
        }
        if (strlen($this->container['uber_trip_branding_text']) > 28) {
            return false;
        }
        return true;
    }


    /**
     * Gets fax_phone
     * @return string
     */
    public function getFaxPhone()
    {
        return $this->container['fax_phone'];
    }

    /**
     * Sets fax_phone
     * @param string $fax_phone Must be a valid phone number, based on the country specified in `countryCode`. Phone numbers for US locations must contain 10 digits.
     * @return $this
     */
    public function setFaxPhone($fax_phone)
    {
        $this->container['fax_phone'] = $fax_phone;

        return $this;
    }

    /**
     * Gets headshot
     * @return object
     */
    public function getHeadshot()
    {
        return $this->container['headshot'];
    }

    /**
     * Sets headshot
     * @param object $headshot A portrait of the healthcare professional  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setHeadshot($headshot)
    {
        $this->container['headshot'] = $headshot;

        return $this;
    }

    /**
     * Gets keywords
     * @return string[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     * @param string[] $keywords Up to 100 keywords may be provided  All strings must be non-empty when trimmed of whitespace.
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets toll_free_phone
     * @return string
     */
    public function getTollFreePhone()
    {
        return $this->container['toll_free_phone'];
    }

    /**
     * Sets toll_free_phone
     * @param string $toll_free_phone Must be a valid phone number, based on the country specified in `countryCode`. Phone numbers for US locations must contain 10 digits.
     * @return $this
     */
    public function setTollFreePhone($toll_free_phone)
    {
        $this->container['toll_free_phone'] = $toll_free_phone;

        return $this;
    }

    /**
     * Gets menu_ids
     * @return string[]
     */
    public function getMenuIds()
    {
        return $this->container['menu_ids'];
    }

    /**
     * Sets menu_ids
     * @param string[] $menu_ids IDs of Menus associated with this location.
     * @return $this
     */
    public function setMenuIds($menu_ids)
    {
        $this->container['menu_ids'] = $menu_ids;

        return $this;
    }

    /**
     * Gets tracking_sites
     * @return string[]
     */
    public function getTrackingSites()
    {
        return $this->container['tracking_sites'];
    }

    /**
     * Sets tracking_sites
     * @param string[] $tracking_sites The search engines that we will use to track your performance
     * @return $this
     */
    public function setTrackingSites($tracking_sites)
    {
        $allowed_values = array('GOOGLE_DESKTOP', 'GOOGLE_MOBILE', 'BING_DESKTOP', 'YAHOO_DESKTOP');
        if (!is_null($tracking_sites) && (array_diff($tracking_sites, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'tracking_sites', must be one of 'GOOGLE_DESKTOP', 'GOOGLE_MOBILE', 'BING_DESKTOP', 'YAHOO_DESKTOP'");
        }
        $this->container['tracking_sites'] = $tracking_sites;

        return $this;
    }

    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     * @param string $middle_name The middle name of the healthcare professional  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets additional_hours_text
     * @return string
     */
    public function getAdditionalHoursText()
    {
        return $this->container['additional_hours_text'];
    }

    /**
     * Sets additional_hours_text
     * @param string $additional_hours_text Additional information about business hours that does not fit in **hours** (e.g., Closed during the winter)
     * @return $this
     */
    public function setAdditionalHoursText($additional_hours_text)
    {
        if (!is_null($additional_hours_text) && (strlen($additional_hours_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $additional_hours_text when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['additional_hours_text'] = $additional_hours_text;

        return $this;
    }

    /**
     * Gets featured_message_url
     * @return string
     */
    public function getFeaturedMessageUrl()
    {
        return $this->container['featured_message_url'];
    }

    /**
     * Sets featured_message_url
     * @param string $featured_message_url Valid URL to which the Featured Message is linked
     * @return $this
     */
    public function setFeaturedMessageUrl($featured_message_url)
    {
        if (!is_null($featured_message_url) && (strlen($featured_message_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $featured_message_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['featured_message_url'] = $featured_message_url;

        return $this;
    }

    /**
     * Gets reservation_url
     * @return string
     */
    public function getReservationUrl()
    {
        return $this->container['reservation_url'];
    }

    /**
     * Sets reservation_url
     * @param string $reservation_url A valid URL used for reservations at this location.
     * @return $this
     */
    public function setReservationUrl($reservation_url)
    {
        if (!is_null($reservation_url) && (strlen($reservation_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $reservation_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['reservation_url'] = $reservation_url;

        return $this;
    }

    /**
     * Gets degrees
     * @return string[]
     */
    public function getDegrees()
    {
        return $this->container['degrees'];
    }

    /**
     * Sets degrees
     * @param string[] $degrees A list of the degrees earned by the healthcare professional  **NOTE:**  This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.  Valid values:  * `ANP` (Adult Nurse Practitioner) * `APN` (Advanced Practice Nurse) * `APRN` (Advanced Practice Registered Nurse) * `ARNP` (Advanced Registered Nurse Practitioner) * `CNM` (Certified Nurse Midwife) * `CNP` (Certified Nurse Practitioner) * `CNS` (Clinical Nurse Specialist)   * `CPNP` (Certified Pediatric Nurse Practitioner) * `CRNA` (Certified Registered Nurse Anesthetist) * `CRNP` (Certified Registered Nurse Practitioner) * `DC` (Doctor of Chiropractic)   * `DDS` (Doctor of Dental Surgery) * `DMD` (Doctor of Dental Medicine) * `DO` (Doctor of Osteopathy) * `DPM` (Doctor of Podiatric Medicine) * `DVM` (Doctor of Veterinary Medicine)   * `FNP` (Family Nurse Practitioner)     * `GNP` (Geriatric Nurse Practitioner) * `LAC` (Licensed Acupuncturist) * `LPN` (Licensed Practical Nurse) * `MD` (Medical Doctor) * `ND` (Naturopathic Doctor) * `NP` (Nurse Practitioner) * `OD` (Doctor of Optometry) * `PA` (Physician Assistant)     * `PAC` (Physician Assistant Certified) * `PHARMD` (Doctor of Pharmacy) * `PHD` (Doctor of Philosophy) * `PNP` (Pediatric Nurse Practitioner)   * `VMD` (Veterinary Medical Doctor) * `WHNP` (Womens Health Nurse Practitioner)
     * @return $this
     */
    public function setDegrees($degrees)
    {
        $this->container['degrees'] = $degrees;

        return $this;
    }

    /**
     * Gets label_ids
     * @return string[]
     */
    public function getLabelIds()
    {
        return $this->container['label_ids'];
    }

    /**
     * Sets label_ids
     * @param string[] $label_ids The IDs of the location labels that have been added to this location. Location labels help you identify locations that share a certain characteristic; they do not appear on your location's listings.  **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
     * @return $this
     */
    public function setLabelIds($label_ids)
    {
        $this->container['label_ids'] = $label_ids;

        return $this;
    }

    /**
     * Gets google_preferred_photo
     * @return string
     */
    public function getGooglePreferredPhoto()
    {
        return $this->container['google_preferred_photo'];
    }

    /**
     * Sets google_preferred_photo
     * @param string $google_preferred_photo The photo Google will consider first when deciding which photo display with the location's business information on Google Maps or Search  One of: * UNSPECIFIED (default) * COVER - the photo in **googleCoverPhoto** * PROFILE - the photo in **googleProfilePhoto**  **NOTE:** If the value of a location's **googlePreferredPhoto** is UNSPECIFIED, **googlePreferredPhoto** will be omitted from the location's data in responses.
     * @return $this
     */
    public function setGooglePreferredPhoto($google_preferred_photo)
    {
        $this->container['google_preferred_photo'] = $google_preferred_photo;

        return $this;
    }

    /**
     * Gets video_urls
     * @return string[]
     */
    public function getVideoUrls()
    {
        return $this->container['video_urls'];
    }

    /**
     * Sets video_urls
     * @param string[] $video_urls Valid YouTube URLs for embedding a video on some publisher sites.  **NOTE:** Currently, only the first URL in the Array appears in your listings.
     * @return $this
     */
    public function setVideoUrls($video_urls)
    {
        $this->container['video_urls'] = $video_urls;

        return $this;
    }

    /**
     * Gets featured_message
     * @return string
     */
    public function getFeaturedMessage()
    {
        return $this->container['featured_message'];
    }

    /**
     * Sets featured_message
     * @param string $featured_message The Featured Message. Default: Call today!  Cannot include: * inappropriate language * HTML markup * a URL or domain name * a phone number * control characters ([\\x00-\\x1F\\x7F]) * insufficient spacing  If you submit a Featured Message that contains profanity or more than 50 characters, it will be ignored. The success response will contain a warning message explaining why your Featured Message wasn't stored in the system.
     * @return $this
     */
    public function setFeaturedMessage($featured_message)
    {
        if (!is_null($featured_message) && (strlen($featured_message) > 50)) {
            throw new \InvalidArgumentException('invalid length for $featured_message when calling Location., must be smaller than or equal to 50.');
        }

        $this->container['featured_message'] = $featured_message;

        return $this;
    }

    /**
     * Gets yext_display_lat
     * @return double
     */
    public function getYextDisplayLat()
    {
        return $this->container['yext_display_lat'];
    }

    /**
     * Sets yext_display_lat
     * @param double $yext_display_lat Latitude where the map pin should be displayed, as calculated by Yext  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setYextDisplayLat($yext_display_lat)
    {
        $this->container['yext_display_lat'] = $yext_display_lat;

        return $this;
    }

    /**
     * Gets mobile_phone
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     * @param string $mobile_phone Must be a valid phone number, based on the country specified in `countryCode`. Phone numbers for US locations must contain 10 digits.
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets service_area
     * @return \Yext\Client\Model\LocationServiceArea
     */
    public function getServiceArea()
    {
        return $this->container['service_area'];
    }

    /**
     * Sets service_area
     * @param \Yext\Client\Model\LocationServiceArea $service_area
     * @return $this
     */
    public function setServiceArea($service_area)
    {
        $this->container['service_area'] = $service_area;

        return $this;
    }

    /**
     * Gets timestamp
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param int $timestamp The timestamp of the most recent change to this location record.  Will be ignored when the client is saving location data to Yext.  **NOTE:** The timestamp may change even if observable fields stay the same.
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2 Cannot be a P.O. Box
     * @return $this
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (strlen($address2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets facebook_cover_photo
     * @return object
     */
    public function getFacebookCoverPhoto()
    {
        return $this->container['facebook_cover_photo'];
    }

    /**
     * Sets facebook_cover_photo
     * @param object $facebook_cover_photo The cover photo for your business's Facebook profile  Displayed as a 851 x 315 pixel image  You must have a cover photo in order for your listing to appear on Facebook.  **NOTE:** Your cover photo must be at least 400 pixels wide.
     * @return $this
     */
    public function setFacebookCoverPhoto($facebook_cover_photo)
    {
        $this->container['facebook_cover_photo'] = $facebook_cover_photo;

        return $this;
    }

    /**
     * Gets yext_walkable_lat
     * @return double
     */
    public function getYextWalkableLat()
    {
        return $this->container['yext_walkable_lat'];
    }

    /**
     * Sets yext_walkable_lat
     * @param double $yext_walkable_lat Latitude to use for walking directions to the location, as calculated by Yext  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setYextWalkableLat($yext_walkable_lat)
    {
        $this->container['yext_walkable_lat'] = $yext_walkable_lat;

        return $this;
    }

    /**
     * Gets bio_list_ids
     * @return string[]
     */
    public function getBioListIds()
    {
        return $this->container['bio_list_ids'];
    }

    /**
     * Sets bio_list_ids
     * @param string[] $bio_list_ids IDs of Bio lists associated with this location.
     * @return $this
     */
    public function setBioListIds($bio_list_ids)
    {
        $this->container['bio_list_ids'] = $bio_list_ids;

        return $this;
    }

    /**
     * Gets facebook_page_url
     * @return string
     */
    public function getFacebookPageUrl()
    {
        return $this->container['facebook_page_url'];
    }

    /**
     * Sets facebook_page_url
     * @param string $facebook_page_url URL for the location's Facebook Page.  Valid formats: * facebook.com/profile.php?id=[numId] * facebook.com/group.php?gid=[numId] * facebook.com/groups/[numId] * facebook.com/[Name] * facebook.com/pages/[Name]/[numId]  where [Name] is a String and [numId] is an Integer  If you submit a URL that is not in one of the valid formats, it will be ignored. The success response will contain a warning message explaining why the URL wasn't stored in the system.  **NOTE:** This value is automatically set to the location's Facebook Page URL. You can only manually set **facebookPageUrl** if the location meets one of the following criteria: * It is not subscribed to a Listings package that contains Facebook. * It is opted out of Facebook.
     * @return $this
     */
    public function setFacebookPageUrl($facebook_page_url)
    {
        if (!is_null($facebook_page_url) && (strlen($facebook_page_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $facebook_page_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['facebook_page_url'] = $facebook_page_url;

        return $this;
    }

    /**
     * Gets emails
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     * @param string[] $emails Up to five emails addresses for reaching this location  Must be valid email addresses
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets walkable_lng
     * @return double
     */
    public function getWalkableLng()
    {
        return $this->container['walkable_lng'];
    }

    /**
     * Sets walkable_lng
     * @param double $walkable_lng Longitude to use for walking directions to the location, as provided by you  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setWalkableLng($walkable_lng)
    {
        $this->container['walkable_lng'] = $walkable_lng;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender The gender of the healthcare professional  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setGender($gender)
    {
        $allowed_values = array('FEMALE', 'F', 'MALE', 'M', 'UNSPECIFIED');
        if (!is_null($gender) && (!in_array($gender, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'gender', must be one of 'FEMALE', 'F', 'MALE', 'M', 'UNSPECIFIED'");
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets website_url
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     * @param string $website_url The URL of the location's website. This URL will be shown on your listings unless you specify a value for `displayWebsiteUrl`.  Must be a valid URL and is required whenever `displayWebsiteUrl` is specified.
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        if (!is_null($website_url) && (strlen($website_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets specialties
     * @return string[]
     */
    public function getSpecialties()
    {
        return $this->container['specialties'];
    }

    /**
     * Sets specialties
     * @param string[] $specialties Up to 100 specialties (e.g., for food and dining: Chicago style)  All strings must be non-empty when trimmed of whitespace.
     * @return $this
     */
    public function setSpecialties($specialties)
    {
        $this->container['specialties'] = $specialties;

        return $this;
    }

    /**
     * Gets bio_lists_label
     * @return string
     */
    public function getBioListsLabel()
    {
        return $this->container['bio_lists_label'];
    }

    /**
     * Sets bio_lists_label
     * @param string $bio_lists_label Label to be used for this location’s Bio lists. This label will appear on your location's listings.
     * @return $this
     */
    public function setBioListsLabel($bio_lists_label)
    {
        $this->container['bio_lists_label'] = $bio_lists_label;

        return $this;
    }

    /**
     * Gets display_lng
     * @return double
     */
    public function getDisplayLng()
    {
        return $this->container['display_lng'];
    }

    /**
     * Sets display_lng
     * @param double $display_lng Longitude where the map pin should be displayed, as provided by you  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setDisplayLng($display_lng)
    {
        $this->container['display_lng'] = $display_lng;

        return $this;
    }

    /**
     * Gets yext_pickup_lng
     * @return double
     */
    public function getYextPickupLng()
    {
        return $this->container['yext_pickup_lng'];
    }

    /**
     * Sets yext_pickup_lng
     * @param double $yext_pickup_lng Longitude to use for pickup spot for the location, as calculated by Yext  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setYextPickupLng($yext_pickup_lng)
    {
        $this->container['yext_pickup_lng'] = $yext_pickup_lng;

        return $this;
    }

    /**
     * Gets product_list_ids
     * @return string[]
     */
    public function getProductListIds()
    {
        return $this->container['product_list_ids'];
    }

    /**
     * Sets product_list_ids
     * @param string[] $product_list_ids IDs of Product lists associated with this location.
     * @return $this
     */
    public function setProductListIds($product_list_ids)
    {
        $this->container['product_list_ids'] = $product_list_ids;

        return $this;
    }

    /**
     * Gets google_cover_photo
     * @return object
     */
    public function getGoogleCoverPhoto()
    {
        return $this->container['google_cover_photo'];
    }

    /**
     * Sets google_cover_photo
     * @param object $google_cover_photo The cover photo for your business's Google profile  NOTE: Your cover photo must meet all of the following requirements: * have a 16:9 aspect ratio * be at least 480 x 270 pixels * be no more than 2120 x 1192 pixels
     * @return $this
     */
    public function setGoogleCoverPhoto($google_cover_photo)
    {
        $this->container['google_cover_photo'] = $google_cover_photo;

        return $this;
    }

    /**
     * Gets education_list
     * @return \Yext\Client\Model\LocationEducationList[]
     */
    public function getEducationList()
    {
        return $this->container['education_list'];
    }

    /**
     * Sets education_list
     * @param \Yext\Client\Model\LocationEducationList[] $education_list A list of the types of education and training completed by the healthcare professional  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setEducationList($education_list)
    {
        $this->container['education_list'] = $education_list;

        return $this;
    }

    /**
     * Gets pickup_lat
     * @return double
     */
    public function getPickupLat()
    {
        return $this->container['pickup_lat'];
    }

    /**
     * Sets pickup_lat
     * @param double $pickup_lat Latitude to use for pickup spot for the location, as provided by you  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setPickupLat($pickup_lat)
    {
        $this->container['pickup_lat'] = $pickup_lat;

        return $this;
    }

    /**
     * Gets logo
     * @return \Yext\Client\Model\LocationPhoto
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     * @param \Yext\Client\Model\LocationPhoto $logo
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets alternate_phone
     * @return string
     */
    public function getAlternatePhone()
    {
        return $this->container['alternate_phone'];
    }

    /**
     * Sets alternate_phone
     * @param string $alternate_phone Must be a valid phone number, based on the country specified in `countryCode`. Phone numbers for US locations must contain 10 digits.
     * @return $this
     */
    public function setAlternatePhone($alternate_phone)
    {
        $this->container['alternate_phone'] = $alternate_phone;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id Must refer to an **account.id** that already exists.
     * @return $this
     */
    public function setAccountId($account_id)
    {
        if (!is_null($account_id) && (strlen($account_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling Location., must be smaller than or equal to 50.');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets menu_url
     * @return string
     */
    public function getMenuUrl()
    {
        return $this->container['menu_url'];
    }

    /**
     * Sets menu_url
     * @param string $menu_url The URL of the location's menu.
     * @return $this
     */
    public function setMenuUrl($menu_url)
    {
        if (!is_null($menu_url) && (strlen($menu_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $menu_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['menu_url'] = $menu_url;

        return $this;
    }

    /**
     * Gets accepting_new_patients
     * @return bool
     */
    public function getAcceptingNewPatients()
    {
        return $this->container['accepting_new_patients'];
    }

    /**
     * Sets accepting_new_patients
     * @param bool $accepting_new_patients Indicates whether the healthcare provider is accepting new patients  Default is true  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL or HEALTHCARE_FACILITY.
     * @return $this
     */
    public function setAcceptingNewPatients($accepting_new_patients)
    {
        $this->container['accepting_new_patients'] = $accepting_new_patients;

        return $this;
    }

    /**
     * Gets display_website_url
     * @return string
     */
    public function getDisplayWebsiteUrl()
    {
        return $this->container['display_website_url'];
    }

    /**
     * Sets display_website_url
     * @param string $display_website_url The URL that is shown on your listings in place of `websiteUrl`. You can use `displayWebsiteUrl` to display a short, memorable web address that redirects consumers to the URL given in `websiteUrl`.  Must be a valid URL and be specified along with `websiteUrl`.
     * @return $this
     */
    public function setDisplayWebsiteUrl($display_website_url)
    {
        if (!is_null($display_website_url) && (strlen($display_website_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $display_website_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['display_website_url'] = $display_website_url;

        return $this;
    }

    /**
     * Gets yext_routable_lng
     * @return double
     */
    public function getYextRoutableLng()
    {
        return $this->container['yext_routable_lng'];
    }

    /**
     * Sets yext_routable_lng
     * @param double $yext_routable_lng Longitude to use for driving directions to the location, as calculated by Yext  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setYextRoutableLng($yext_routable_lng)
    {
        $this->container['yext_routable_lng'] = $yext_routable_lng;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state For US locations, the two-character code of the location’s state, or DC for the District of Columbia For non-US locations, the name of the location’s province / region / state
     * @return $this
     */
    public function setState($state)
    {
        if (!is_null($state) && (strlen($state) > 80)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Location., must be smaller than or equal to 80.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets suppress_address
     * @return bool
     */
    public function getSuppressAddress()
    {
        return $this->container['suppress_address'];
    }

    /**
     * Sets suppress_address
     * @param bool $suppress_address If true, do not show street address on listings. Defaults to false.
     * @return $this
     */
    public function setSuppressAddress($suppress_address)
    {
        $this->container['suppress_address'] = $suppress_address;

        return $this;
    }

    /**
     * Gets closed
     * @return \Yext\Client\Model\LocationClosed
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     * @param \Yext\Client\Model\LocationClosed $closed
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets display_menu_url
     * @return string
     */
    public function getDisplayMenuUrl()
    {
        return $this->container['display_menu_url'];
    }

    /**
     * Sets display_menu_url
     * @param string $display_menu_url The URL that is shown on your listings in place of `menuUrl`. You can use `displayMenuUrl` to display a short, memorable web address that redirects consumers to the URL given in `menuUrl`.  Must be a valid URL and be specified along with `menuUrl`.
     * @return $this
     */
    public function setDisplayMenuUrl($display_menu_url)
    {
        if (!is_null($display_menu_url) && (strlen($display_menu_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $display_menu_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['display_menu_url'] = $display_menu_url;

        return $this;
    }

    /**
     * Gets office_name
     * @return string
     */
    public function getOfficeName()
    {
        return $this->container['office_name'];
    }

    /**
     * Sets office_name
     * @param string $office_name The name of the office where the healthcare professional works, if different from **locationName**  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setOfficeName($office_name)
    {
        $this->container['office_name'] = $office_name;

        return $this;
    }

    /**
     * Gets yext_dropoff_lat
     * @return double
     */
    public function getYextDropoffLat()
    {
        return $this->container['yext_dropoff_lat'];
    }

    /**
     * Sets yext_dropoff_lat
     * @param double $yext_dropoff_lat Latitude to use for drop off spot for the location, as calculated by Yext  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setYextDropoffLat($yext_dropoff_lat)
    {
        $this->container['yext_dropoff_lat'] = $yext_dropoff_lat;

        return $this;
    }

    /**
     * Gets hours
     * @return string
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     * @param string $hours Hours should be submitted as a comma-separated list of days, where each day's hours are specified as follows:  d:oh:om:ch:cm * d = day of the week –   * 1 – Sunday   * 2 – Monday   * 3 – Tuesday   * 4 – Wednesday   * 5 – Thursday   * 6 – Friday   * 7 – Saturday * oh:om = opening time in 24-hour format * ch:cm = closing time in 24-hour format  Times with single-digit hours (e.g., 9 AM) can be submitted with or without a leading zero (9:00 or 09:00).  **Example:** open 9 AM to 5 PM Monday and Tuesday, open 10 AM to 4 PM on Saturday – 2:9:00:17:00,3:9:00:17:00,7:10:00:16:00  SPECIAL CASES: * To indicate that a location is open 24 hours on a specific day, set 00:00 as both the opening and closing time for that day.   * **Example:** open all day on Saturdays – 7:00:00:00:00 * To indicate that a location is closed on a specific day, omit that day from the list or set it as closed (\"closed\" is not case sensitive).   * **Example:** closed on Sundays – 1:closed   * **NOTE:** If a location is closed seven days a week, set at least one day to closed. Otherwise, **hours** is an empty string, and we assume you are not submitting hours information for that location. * To indicate that a location has split hours on a specific day, submit a set of hours for each block of time the location is open.   * **Example:** open from 9:00 AM to 12:00 PM and again from 1:00 PM to 5:00 PM on Mondays – 2:9:00:12:00,2:13:00:17:00  **NOTE:** To set hours for specific days of the year rather than days of the week, use **holidayHours**.
     * @return $this
     */
    public function setHours($hours)
    {
        if (!is_null($hours) && (strlen($hours) > 255)) {
            throw new \InvalidArgumentException('invalid length for $hours when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param string $address Must be a valid address  Cannot be a P.O. Box
     * @return $this
     */
    public function setAddress($address)
    {
        if (!is_null($address) && (strlen($address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets uber_link
     * @return string
     */
    public function getUberLink()
    {
        return $this->container['uber_link'];
    }

    /**
     * Sets uber_link
     * @param string $uber_link The Yext-powered link that can be copied and pasted into the markup of Yext Pages where the embedded Uber link should appear
     * @return $this
     */
    public function setUberLink($uber_link)
    {
        $this->container['uber_link'] = $uber_link;

        return $this;
    }

    /**
     * Gets uber_client_id
     * @return string
     */
    public function getUberClientId()
    {
        return $this->container['uber_client_id'];
    }

    /**
     * Sets uber_client_id
     * @param string $uber_client_id The ID that enables **uberTripBrandingText** and **uberTripBrandingUrl**. For more information, contact your Account Manager.
     * @return $this
     */
    public function setUberClientId($uber_client_id)
    {
        $this->container['uber_client_id'] = $uber_client_id;

        return $this;
    }

    /**
     * Gets facebook_profile_picture
     * @return object
     */
    public function getFacebookProfilePicture()
    {
        return $this->container['facebook_profile_picture'];
    }

    /**
     * Sets facebook_profile_picture
     * @param object $facebook_profile_picture The profile picture for your business's Facebook profile  You must have a profile picture in order for your listing to appear on Facebook.  **NOTE:** Your profile picture must be larger than 180 x 180 pixels.
     * @return $this
     */
    public function setFacebookProfilePicture($facebook_profile_picture)
    {
        $this->container['facebook_profile_picture'] = $facebook_profile_picture;

        return $this;
    }

    /**
     * Gets certifications
     * @return string[]
     */
    public function getCertifications()
    {
        return $this->container['certifications'];
    }

    /**
     * Sets certifications
     * @param string[] $certifications A list of the certifications held by the healthcare professional  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setCertifications($certifications)
    {
        $this->container['certifications'] = $certifications;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language Language code of the language in which this location's information is provided. This language is considered the Location's primary language in our system.   If you would like to provide your Location data in more than one language, you can create a Language Profile for each of these additional (alternate) languages.
     * @return $this
     */
    public function setLanguage($language)
    {
        if (!is_null($language) && (strlen($language) > 10)) {
            throw new \InvalidArgumentException('invalid length for $language when calling Location., must be smaller than or equal to 10.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name The last name of the healthcare professional  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets location_name
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     * @param string $location_name Cannot include: * inappropriate language * HTML markup or entities * a URL or domain name * a phone number * control characters ([\\x00-\\x1F\\x7F])  Should be in appropriate letter case (e.g., not in all capital letters)
     * @return $this
     */
    public function setLocationName($location_name)
    {
        if (!is_null($location_name) && (strlen($location_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $location_name when calling Location., must be smaller than or equal to 100.');
        }

        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets query_templates
     * @return string[]
     */
    public function getQueryTemplates()
    {
        return $this->container['query_templates'];
    }

    /**
     * Sets query_templates
     * @param string[] $query_templates The ways in which your keywords will be arranged in the search queries we use to track your performance
     * @return $this
     */
    public function setQueryTemplates($query_templates)
    {
        $allowed_values = array('KEYWORD', 'KEYWORD_ZIP', 'KEYWORD_CITY', 'KEYWORD_IN_CITY', 'KEYWORD_NEAR_ME', 'KEYWORD_CITY_STATE');
        if (!is_null($query_templates) && (array_diff($query_templates, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'query_templates', must be one of 'KEYWORD', 'KEYWORD_ZIP', 'KEYWORD_CITY', 'KEYWORD_IN_CITY', 'KEYWORD_NEAR_ME', 'KEYWORD_CITY_STATE'");
        }
        $this->container['query_templates'] = $query_templates;

        return $this;
    }

    /**
     * Gets products
     * @return string[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     * @param string[] $products Up to 100 products sold at this location  All strings must be non-empty when trimmed of whitespace.
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets uber_link_text
     * @return string
     */
    public function getUberLinkText()
    {
        return $this->container['uber_link_text'];
    }

    /**
     * Sets uber_link_text
     * @param string $uber_link_text The text of the embedded Uber link  Default is \"Ride there with Uber\".  **NOTE:** This field is only available if **uberLinkType** is LINK.
     * @return $this
     */
    public function setUberLinkText($uber_link_text)
    {
        if (!is_null($uber_link_text) && (strlen($uber_link_text) > 100)) {
            throw new \InvalidArgumentException('invalid length for $uber_link_text when calling Location., must be smaller than or equal to 100.');
        }

        $this->container['uber_link_text'] = $uber_link_text;

        return $this;
    }

    /**
     * Gets google_attributes
     * @return \Yext\Client\Model\LocationGoogleAttributes[]
     */
    public function getGoogleAttributes()
    {
        return $this->container['google_attributes'];
    }

    /**
     * Sets google_attributes
     * @param \Yext\Client\Model\LocationGoogleAttributes[] $google_attributes The Google My Business attributes for this location.
     * @return $this
     */
    public function setGoogleAttributes($google_attributes)
    {
        $this->container['google_attributes'] = $google_attributes;

        return $this;
    }

    /**
     * Gets payment_options
     * @return string[]
     */
    public function getPaymentOptions()
    {
        return $this->container['payment_options'];
    }

    /**
     * Sets payment_options
     * @param string[] $payment_options The payment methods accepted at this location  Valid elements depend on the location's country. For US locations, valid elements are: * AMERICANEXPRESS * CASH * CHECK * DINERSCLUB * DISCOVER * FINANCING * INVOICE * MASTERCARD * TRAVELERSCHECK * VISA * ANDROIDPAY * APPLEPAY * SAMSUNGPAY
     * @return $this
     */
    public function setPaymentOptions($payment_options)
    {
        $this->container['payment_options'] = $payment_options;

        return $this;
    }

    /**
     * Gets custom_keywords
     * @return string[]
     */
    public function getCustomKeywords()
    {
        return $this->container['custom_keywords'];
    }

    /**
     * Sets custom_keywords
     * @param string[] $custom_keywords Additional keywords you would like us to use when tracking your search performance
     * @return $this
     */
    public function setCustomKeywords($custom_keywords)
    {
        $this->container['custom_keywords'] = $custom_keywords;

        return $this;
    }

    /**
     * Gets dropoff_lng
     * @return double
     */
    public function getDropoffLng()
    {
        return $this->container['dropoff_lng'];
    }

    /**
     * Sets dropoff_lng
     * @param double $dropoff_lng Longitude to use for drop off spot for the location, as provided by you  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setDropoffLng($dropoff_lng)
    {
        $this->container['dropoff_lng'] = $dropoff_lng;

        return $this;
    }

    /**
     * Gets intelligent_search_tracking_enabled
     * @return bool
     */
    public function getIntelligentSearchTrackingEnabled()
    {
        return $this->container['intelligent_search_tracking_enabled'];
    }

    /**
     * Sets intelligent_search_tracking_enabled
     * @param bool $intelligent_search_tracking_enabled Indicates whether Intelligent Search Tracker is enabled.  The Intelligent Search Tracker allows you to understand your performance in local search.
     * @return $this
     */
    public function setIntelligentSearchTrackingEnabled($intelligent_search_tracking_enabled)
    {
        $this->container['intelligent_search_tracking_enabled'] = $intelligent_search_tracking_enabled;

        return $this;
    }

    /**
     * Gets uber_embed_code
     * @return string
     */
    public function getUberEmbedCode()
    {
        return $this->container['uber_embed_code'];
    }

    /**
     * Sets uber_embed_code
     * @param string $uber_embed_code The Yext-powered code that can be copied and pasted into the markup of emails or web pages where the embedded Uber link should appear
     * @return $this
     */
    public function setUberEmbedCode($uber_embed_code)
    {
        $this->container['uber_embed_code'] = $uber_embed_code;

        return $this;
    }

    /**
     * Gets display_reservation_url
     * @return string
     */
    public function getDisplayReservationUrl()
    {
        return $this->container['display_reservation_url'];
    }

    /**
     * Sets display_reservation_url
     * @param string $display_reservation_url The URL that is shown on your listings in place of `reservationUrl`. You can use `displayReservationUrl` to display a short, memorable web address that redirects consumers to the URL given in `reservationUrl`.  Must be a valid URL and be specified along with `reservationUrl`.
     * @return $this
     */
    public function setDisplayReservationUrl($display_reservation_url)
    {
        if (!is_null($display_reservation_url) && (strlen($display_reservation_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $display_reservation_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['display_reservation_url'] = $display_reservation_url;

        return $this;
    }

    /**
     * Gets yext_display_lng
     * @return double
     */
    public function getYextDisplayLng()
    {
        return $this->container['yext_display_lng'];
    }

    /**
     * Sets yext_display_lng
     * @param double $yext_display_lng Longitude where the map pin should be displayed, as calculated by Yext  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setYextDisplayLng($yext_display_lng)
    {
        $this->container['yext_display_lng'] = $yext_display_lng;

        return $this;
    }

    /**
     * Gets display_address
     * @return string
     */
    public function getDisplayAddress()
    {
        return $this->container['display_address'];
    }

    /**
     * Sets display_address
     * @param string $display_address Provides additional information to help consumers get to the location. This string appears along with the location's address (e.g., In Menlo Mall, 3rd Floor).  It may also be used in conjunction with a hidden address (i.e., when **suppressAddress** is true) to give consumers information about where the location is found (e.g., Servicing the New York area).  Cannot be a P.O. Box
     * @return $this
     */
    public function setDisplayAddress($display_address)
    {
        if (!is_null($display_address) && (strlen($display_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $display_address when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['display_address'] = $display_address;

        return $this;
    }

    /**
     * Gets category_ids
     * @return string[]
     */
    public function getCategoryIds()
    {
        return $this->container['category_ids'];
    }

    /**
     * Sets category_ids
     * @param string[] $category_ids Yext Category IDs. A Location must have at least one and at most 10 Categories.  IDs must be valid and selectable (i.e., cannot be parent categories).  **NOTE:** The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings.
     * @return $this
     */
    public function setCategoryIds($category_ids)
    {
        $this->container['category_ids'] = $category_ids;

        return $this;
    }

    /**
     * Gets product_lists_label
     * @return string
     */
    public function getProductListsLabel()
    {
        return $this->container['product_lists_label'];
    }

    /**
     * Sets product_lists_label
     * @param string $product_lists_label Services lists. This label will appear on your location's listings.
     * @return $this
     */
    public function setProductListsLabel($product_lists_label)
    {
        $this->container['product_lists_label'] = $product_lists_label;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (strlen($city) > 80)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Location., must be smaller than or equal to 80.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets menus_label
     * @return string
     */
    public function getMenusLabel()
    {
        return $this->container['menus_label'];
    }

    /**
     * Sets menus_label
     * @param string $menus_label Label to be used for this location’s Menus. This label will appear on your location's listings.
     * @return $this
     */
    public function setMenusLabel($menus_label)
    {
        $this->container['menus_label'] = $menus_label;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip The location's postal code. For US locations, this field contains the five- or nine-digit ZIP code (the hyphen is optional). Validations are only done on `zip` if `countryCode` is US.
     * @return $this
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (strlen($zip) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Location., must be smaller than or equal to 10.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets local_phone
     * @return string
     */
    public function getLocalPhone()
    {
        return $this->container['local_phone'];
    }

    /**
     * Sets local_phone
     * @param string $local_phone Must be a valid, non-toll-free phone number.  Required if: * **isPhoneTracked** is true and the non-tracked number is a toll-free number, **OR** * **isPhoneTracked** is false and **phone** is a toll-free number
     * @return $this
     */
    public function setLocalPhone($local_phone)
    {
        $this->container['local_phone'] = $local_phone;

        return $this;
    }

    /**
     * Gets order_url
     * @return string
     */
    public function getOrderUrl()
    {
        return $this->container['order_url'];
    }

    /**
     * Sets order_url
     * @param string $order_url The URL used to place orders that will be fulfilled at the location.
     * @return $this
     */
    public function setOrderUrl($order_url)
    {
        if (!is_null($order_url) && (strlen($order_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $order_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['order_url'] = $order_url;

        return $this;
    }

    /**
     * Gets dropoff_lat
     * @return double
     */
    public function getDropoffLat()
    {
        return $this->container['dropoff_lat'];
    }

    /**
     * Sets dropoff_lat
     * @param double $dropoff_lat Latitude to use for drop off spot for the location, as provided by you  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setDropoffLat($dropoff_lat)
    {
        $this->container['dropoff_lat'] = $dropoff_lat;

        return $this;
    }

    /**
     * Gets conditions_treated
     * @return string[]
     */
    public function getConditionsTreated()
    {
        return $this->container['conditions_treated'];
    }

    /**
     * Sets conditions_treated
     * @param string[] $conditions_treated A list of the conditions treated by the healthcare provider  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL or HEALTHCARE_FACILITY.
     * @return $this
     */
    public function setConditionsTreated($conditions_treated)
    {
        $this->container['conditions_treated'] = $conditions_treated;

        return $this;
    }

    /**
     * Gets pickup_lng
     * @return double
     */
    public function getPickupLng()
    {
        return $this->container['pickup_lng'];
    }

    /**
     * Sets pickup_lng
     * @param double $pickup_lng Longitude to use for pickup spot for the location, as provided by you  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setPickupLng($pickup_lng)
    {
        $this->container['pickup_lng'] = $pickup_lng;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param map[string,object] $custom_fields A set of key-value pairs indicating the location's custom fields and their values. The keys are the Yext Custom Field IDs of the custom fields, and the values are the fields' contents. If the fields' contents are options, those options must be represented by their Yext IDs.
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets walkable_lat
     * @return double
     */
    public function getWalkableLat()
    {
        return $this->container['walkable_lat'];
    }

    /**
     * Sets walkable_lat
     * @param double $walkable_lat Latitude to use for walking directions to the location, as provided by you  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setWalkableLat($walkable_lat)
    {
        $this->container['walkable_lat'] = $walkable_lat;

        return $this;
    }

    /**
     * Gets insurance_accepted
     * @return string[]
     */
    public function getInsuranceAccepted()
    {
        return $this->container['insurance_accepted'];
    }

    /**
     * Sets insurance_accepted
     * @param string[] $insurance_accepted A list of insurance policies accepted by the healthcare provider  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setInsuranceAccepted($insurance_accepted)
    {
        $this->container['insurance_accepted'] = $insurance_accepted;

        return $this;
    }

    /**
     * Gets uber_link_type
     * @return string
     */
    public function getUberLinkType()
    {
        return $this->container['uber_link_type'];
    }

    /**
     * Sets uber_link_type
     * @param string $uber_link_type Indicates whether the embedded Uber link for this location appears as text or a button  When consumers click on this link on a mobile device, the Uber app (if installed) will open with your location set as the trip destination. If the Uber app is not installed, the consumer will be prompted to download it.
     * @return $this
     */
    public function setUberLinkType($uber_link_type)
    {
        $allowed_values = array('LINK', 'BUTTON');
        if (!is_null($uber_link_type) && (!in_array($uber_link_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'uber_link_type', must be one of 'LINK', 'BUTTON'");
        }
        $this->container['uber_link_type'] = $uber_link_type;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Must be a valid phone number.
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets folder_id
     * @return string
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     * @param string $folder_id The folder that this location is in. If the location is in the customer-level (root) folder, its folderId will be 0. Must be a valid, existing Yext Folder ID or 0
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets google_profile_photo
     * @return object
     */
    public function getGoogleProfilePhoto()
    {
        return $this->container['google_profile_photo'];
    }

    /**
     * Sets google_profile_photo
     * @param object $google_profile_photo The profile photo for your business's Google profile  **NOTE:** Your profile picture must meet all of the following requirements: * be a square * be at least 200 x 200 pixels * be no more than 500 x 500 pixels
     * @return $this
     */
    public function setGoogleProfilePhoto($google_profile_photo)
    {
        $this->container['google_profile_photo'] = $google_profile_photo;

        return $this;
    }

    /**
     * Gets instagram_handle
     * @return string
     */
    public function getInstagramHandle()
    {
        return $this->container['instagram_handle'];
    }

    /**
     * Sets instagram_handle
     * @param string $instagram_handle Valid Instagram username for the location (e.g., NewCityFiat (without the leading \"@\"))
     * @return $this
     */
    public function setInstagramHandle($instagram_handle)
    {
        $this->container['instagram_handle'] = $instagram_handle;

        return $this;
    }

    /**
     * Gets event_lists_label
     * @return string
     */
    public function getEventListsLabel()
    {
        return $this->container['event_lists_label'];
    }

    /**
     * Sets event_lists_label
     * @param string $event_lists_label Label to be used for this location’s Event lists. This label will appear on your location's listings.
     * @return $this
     */
    public function setEventListsLabel($event_lists_label)
    {
        $this->container['event_lists_label'] = $event_lists_label;

        return $this;
    }

    /**
     * Gets holiday_hours
     * @return \Yext\Client\Model\LocationHolidayHours[]
     */
    public function getHolidayHours()
    {
        return $this->container['holiday_hours'];
    }

    /**
     * Sets holiday_hours
     * @param \Yext\Client\Model\LocationHolidayHours[] $holiday_hours Holiday hours for this location.  **NOTE:** hours must be set in order for holidayHours to appear on your listings)
     * @return $this
     */
    public function setHolidayHours($holiday_hours)
    {
        $this->container['holiday_hours'] = $holiday_hours;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name The first name of the healthcare professional  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets languages
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     * @param string[] $languages Up to 100 languages spoken at this location.  All strings must be non-empty when trimmed of whitespace.
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets location_type
     * @return \Yext\Client\Model\LocationType
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     * @param \Yext\Client\Model\LocationType $location_type
     * @return $this
     */
    public function setLocationType($location_type)
    {
        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets admitting_hospitals
     * @return string[]
     */
    public function getAdmittingHospitals()
    {
        return $this->container['admitting_hospitals'];
    }

    /**
     * Sets admitting_hospitals
     * @param string[] $admitting_hospitals A list of hospitals where the healthcare professional admits patients  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL.
     * @return $this
     */
    public function setAdmittingHospitals($admitting_hospitals)
    {
        $this->container['admitting_hospitals'] = $admitting_hospitals;

        return $this;
    }

    /**
     * Gets year_established
     * @return string
     */
    public function getYearEstablished()
    {
        return $this->container['year_established'];
    }

    /**
     * Sets year_established
     * @param string $year_established The year that this location was opened, not the number of years it was open  Minimum of 1000, maximum of current year + 10.
     * @return $this
     */
    public function setYearEstablished($year_established)
    {
        if (!is_null($year_established) && (strlen($year_established) > 4)) {
            throw new \InvalidArgumentException('invalid length for $year_established when calling Location., must be smaller than or equal to 4.');
        }

        $this->container['year_established'] = $year_established;

        return $this;
    }

    /**
     * Gets yext_walkable_lng
     * @return double
     */
    public function getYextWalkableLng()
    {
        return $this->container['yext_walkable_lng'];
    }

    /**
     * Sets yext_walkable_lng
     * @param double $yext_walkable_lng Longitude to use for walking directions to the location, as calculated by Yext  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setYextWalkableLng($yext_walkable_lng)
    {
        $this->container['yext_walkable_lng'] = $yext_walkable_lng;

        return $this;
    }

    /**
     * Gets associations
     * @return string[]
     */
    public function getAssociations()
    {
        return $this->container['associations'];
    }

    /**
     * Sets associations
     * @param string[] $associations Up to 100 association memberships relevant to the location (e.g., New York Doctors Association)  All strings must be non-empty when trimmed of whitespace.
     * @return $this
     */
    public function setAssociations($associations)
    {
        $this->container['associations'] = $associations;

        return $this;
    }

    /**
     * Gets routable_lng
     * @return double
     */
    public function getRoutableLng()
    {
        return $this->container['routable_lng'];
    }

    /**
     * Sets routable_lng
     * @param double $routable_lng Longitude to use for driving directions to the location, as provided by you  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setRoutableLng($routable_lng)
    {
        $this->container['routable_lng'] = $routable_lng;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code The country code (two-character ISO 3166-1) of the location's country. If omitted, US is used.
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling Location., must be smaller than or equal to 2.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets yext_pickup_lat
     * @return double
     */
    public function getYextPickupLat()
    {
        return $this->container['yext_pickup_lat'];
    }

    /**
     * Sets yext_pickup_lat
     * @param double $yext_pickup_lat Latitude to use for pickup spot for the location, as calculated by Yext  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setYextPickupLat($yext_pickup_lat)
    {
        $this->container['yext_pickup_lat'] = $yext_pickup_lat;

        return $this;
    }

    /**
     * Gets location_keywords
     * @return string[]
     */
    public function getLocationKeywords()
    {
        return $this->container['location_keywords'];
    }

    /**
     * Sets location_keywords
     * @param string[] $location_keywords Keywords that we will use to track your search performance. These keywords are based on the location information you've stored in our system.
     * @return $this
     */
    public function setLocationKeywords($location_keywords)
    {
        $allowed_values = array('NAME', 'PRIMARY_CATEGORY');
        if (!is_null($location_keywords) && (array_diff($location_keywords, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'location_keywords', must be one of 'NAME', 'PRIMARY_CATEGORY'");
        }
        $this->container['location_keywords'] = $location_keywords;

        return $this;
    }

    /**
     * Gets google_website_override
     * @return string
     */
    public function getGoogleWebsiteOverride()
    {
        return $this->container['google_website_override'];
    }

    /**
     * Sets google_website_override
     * @param string $google_website_override The URL you would like to submit to Google My Business in place of the one given in **websiteUrl** (if applicable).  For example, if you want to analyze the traffic driven by your Google listings separately from other traffic, enter the alternate URL that you will use for tracking in this field.
     * @return $this
     */
    public function setGoogleWebsiteOverride($google_website_override)
    {
        if (!is_null($google_website_override) && (strlen($google_website_override) > 255)) {
            throw new \InvalidArgumentException('invalid length for $google_website_override when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['google_website_override'] = $google_website_override;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Primary key. Unique alphanumeric (Latin-1) ID assigned by the Customer.
     * @return $this
     */
    public function setId($id)
    {
        if (!is_null($id) && (strlen($id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Location., must be smaller than or equal to 50.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets alternate_websites
     * @return string[]
     */
    public function getAlternateWebsites()
    {
        return $this->container['alternate_websites'];
    }

    /**
     * Sets alternate_websites
     * @param string[] $alternate_websites Other websites for your business that we should look for when tracking your search performance
     * @return $this
     */
    public function setAlternateWebsites($alternate_websites)
    {
        $this->container['alternate_websites'] = $alternate_websites;

        return $this;
    }

    /**
     * Gets intelligent_search_tracking_frequency
     * @return string
     */
    public function getIntelligentSearchTrackingFrequency()
    {
        return $this->container['intelligent_search_tracking_frequency'];
    }

    /**
     * Sets intelligent_search_tracking_frequency
     * @param string $intelligent_search_tracking_frequency How often we send search queries to track your search performance.
     * @return $this
     */
    public function setIntelligentSearchTrackingFrequency($intelligent_search_tracking_frequency)
    {
        $allowed_values = array('WEEKLY', 'MONTHLY', 'QUARTERLY');
        if (!is_null($intelligent_search_tracking_frequency) && (!in_array($intelligent_search_tracking_frequency, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'intelligent_search_tracking_frequency', must be one of 'WEEKLY', 'MONTHLY', 'QUARTERLY'");
        }
        $this->container['intelligent_search_tracking_frequency'] = $intelligent_search_tracking_frequency;

        return $this;
    }

    /**
     * Gets event_list_ids
     * @return string[]
     */
    public function getEventListIds()
    {
        return $this->container['event_list_ids'];
    }

    /**
     * Sets event_list_ids
     * @param string[] $event_list_ids IDs of Event lists associated with this location.
     * @return $this
     */
    public function setEventListIds($event_list_ids)
    {
        $this->container['event_list_ids'] = $event_list_ids;

        return $this;
    }

    /**
     * Gets display_lat
     * @return double
     */
    public function getDisplayLat()
    {
        return $this->container['display_lat'];
    }

    /**
     * Sets display_lat
     * @param double $display_lat Latitude where the map pin should be displayed, as provided by you  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setDisplayLat($display_lat)
    {
        $this->container['display_lat'] = $display_lat;

        return $this;
    }

    /**
     * Gets competitors
     * @return \Yext\Client\Model\LocationCompetitors[]
     */
    public function getCompetitors()
    {
        return $this->container['competitors'];
    }

    /**
     * Sets competitors
     * @param \Yext\Client\Model\LocationCompetitors[] $competitors The names and websites of the competitors whose search performance you would like to compare to your own
     * @return $this
     */
    public function setCompetitors($competitors)
    {
        $this->container['competitors'] = $competitors;

        return $this;
    }

    /**
     * Gets yext_dropoff_lng
     * @return double
     */
    public function getYextDropoffLng()
    {
        return $this->container['yext_dropoff_lng'];
    }

    /**
     * Sets yext_dropoff_lng
     * @param double $yext_dropoff_lng Longitude to use for drop off spot for the location, as calculated by Yext  Between -180.0 and 180.0, inclusive
     * @return $this
     */
    public function setYextDropoffLng($yext_dropoff_lng)
    {
        $this->container['yext_dropoff_lng'] = $yext_dropoff_lng;

        return $this;
    }

    /**
     * Gets is_phone_tracked
     * @return bool
     */
    public function getIsPhoneTracked()
    {
        return $this->container['is_phone_tracked'];
    }

    /**
     * Sets is_phone_tracked
     * @param bool $is_phone_tracked Set to true if the number listed in **phone** is a tracked phone number.  **NOTE:** When updating **isPhoneTracked**, you must provide a value for **phone** in the same request.
     * @return $this
     */
    public function setIsPhoneTracked($is_phone_tracked)
    {
        $this->container['is_phone_tracked'] = $is_phone_tracked;

        return $this;
    }

    /**
     * Gets tty_phone
     * @return string
     */
    public function getTtyPhone()
    {
        return $this->container['tty_phone'];
    }

    /**
     * Sets tty_phone
     * @param string $tty_phone Must be a valid phone number, based on the country specified in `countryCode`. Phone numbers for US locations must contain 10 digits.
     * @return $this
     */
    public function setTtyPhone($tty_phone)
    {
        $this->container['tty_phone'] = $tty_phone;

        return $this;
    }

    /**
     * Gets npi
     * @return string
     */
    public function getNpi()
    {
        return $this->container['npi'];
    }

    /**
     * Sets npi
     * @param string $npi The National Provider Identifier (NPI) of the healthcare provider  **NOTE:** This field is only available to locations whose **locationType** is HEALTHCARE_PROFESSIONAL or HEALTHCARE_FACILITY.
     * @return $this
     */
    public function setNpi($npi)
    {
        $this->container['npi'] = $npi;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (strlen($description) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Location., must be smaller than or equal to 5000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets twitter_handle
     * @return string
     */
    public function getTwitterHandle()
    {
        return $this->container['twitter_handle'];
    }

    /**
     * Sets twitter_handle
     * @param string $twitter_handle Valid Twitter handle for the location (e.g., JohnSmith (without the leading '@')). If you submit an invalid Twitter handle, it will be ignored. The success response will contain a warning message explaining why your Twitter handle wasn't stored in the system.
     * @return $this
     */
    public function setTwitterHandle($twitter_handle)
    {
        if (!is_null($twitter_handle) && (strlen($twitter_handle) > 15)) {
            throw new \InvalidArgumentException('invalid length for $twitter_handle when calling Location., must be smaller than or equal to 15.');
        }

        $this->container['twitter_handle'] = $twitter_handle;

        return $this;
    }

    /**
     * Gets brands
     * @return string[]
     */
    public function getBrands()
    {
        return $this->container['brands'];
    }

    /**
     * Sets brands
     * @param string[] $brands Up to 100 brands sold by this location  All strings must be non-empty when trimmed of whitespace.
     * @return $this
     */
    public function setBrands($brands)
    {
        $this->container['brands'] = $brands;

        return $this;
    }

    /**
     * Gets uber_trip_branding_url
     * @return string
     */
    public function getUberTripBrandingUrl()
    {
        return $this->container['uber_trip_branding_url'];
    }

    /**
     * Sets uber_trip_branding_url
     * @param string $uber_trip_branding_url The URL that the consumer will be redirected to when tapping on the call-to-action in the Uber app during a trip to your location.  **NOTE:** If a value for **uberTripBrandingUrl** is provided, a value must also be provided for **uberTripBrandingText**.
     * @return $this
     */
    public function setUberTripBrandingUrl($uber_trip_branding_url)
    {
        $this->container['uber_trip_branding_url'] = $uber_trip_branding_url;

        return $this;
    }

    /**
     * Gets routable_lat
     * @return double
     */
    public function getRoutableLat()
    {
        return $this->container['routable_lat'];
    }

    /**
     * Sets routable_lat
     * @param double $routable_lat Latitude to use for driving directions to the location, as provided by you  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setRoutableLat($routable_lat)
    {
        $this->container['routable_lat'] = $routable_lat;

        return $this;
    }

    /**
     * Gets yext_routable_lat
     * @return double
     */
    public function getYextRoutableLat()
    {
        return $this->container['yext_routable_lat'];
    }

    /**
     * Sets yext_routable_lat
     * @param double $yext_routable_lat Latitude to use for driving directions to the location, as calculated by Yext  Between -90.0 and 90.0, inclusive
     * @return $this
     */
    public function setYextRoutableLat($yext_routable_lat)
    {
        $this->container['yext_routable_lat'] = $yext_routable_lat;

        return $this;
    }

    /**
     * Gets alternate_names
     * @return string[]
     */
    public function getAlternateNames()
    {
        return $this->container['alternate_names'];
    }

    /**
     * Sets alternate_names
     * @param string[] $alternate_names Other names for your business that you would like us to use when tracking your search performance
     * @return $this
     */
    public function setAlternateNames($alternate_names)
    {
        $this->container['alternate_names'] = $alternate_names;

        return $this;
    }

    /**
     * Gets photos
     * @return \Yext\Client\Model\LocationPhoto[]
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     * @param \Yext\Client\Model\LocationPhoto[] $photos Up to 50 Photos.  **NOTE:** The list of photos that you send us must be comprehensive. For example, if you send us a list of photos that does not include photos that you sent in your last update, Yext considers the missing photos to be deleted, and we remove them from your listings.
     * @return $this
     */
    public function setPhotos($photos)
    {
        $this->container['photos'] = $photos;

        return $this;
    }

    /**
     * Gets display_order_url
     * @return string
     */
    public function getDisplayOrderUrl()
    {
        return $this->container['display_order_url'];
    }

    /**
     * Sets display_order_url
     * @param string $display_order_url The URL that is shown on your listings in place of `orderUrl`. You can use `displayOrderUrl` to display a short, memorable web address that redirects consumers to the URL given in `orderUrl`.  Must be a valid URL and be specified along with `orderUrl`.
     * @return $this
     */
    public function setDisplayOrderUrl($display_order_url)
    {
        if (!is_null($display_order_url) && (strlen($display_order_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $display_order_url when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['display_order_url'] = $display_order_url;

        return $this;
    }

    /**
     * Gets services
     * @return string[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     * @param string[] $services Up to 100 services offered at this location  All strings must be non-empty when trimmed of whitespace.
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets sublocality
     * @return string
     */
    public function getSublocality()
    {
        return $this->container['sublocality'];
    }

    /**
     * Sets sublocality
     * @param string $sublocality The name of the location's sublocality.
     * @return $this
     */
    public function setSublocality($sublocality)
    {
        if (!is_null($sublocality) && (strlen($sublocality) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sublocality when calling Location., must be smaller than or equal to 255.');
        }

        $this->container['sublocality'] = $sublocality;

        return $this;
    }

    /**
     * Gets uber_trip_branding_text
     * @return string
     */
    public function getUberTripBrandingText()
    {
        return $this->container['uber_trip_branding_text'];
    }

    /**
     * Sets uber_trip_branding_text
     * @param string $uber_trip_branding_text The text of the call-to-action that will appear in the Uber app during a trip to your location (e.g., Check out our menu!)  **NOTE:** If a value for **uberTripBrandingText** is provided, a value must also be provided for **uberTripBrandingUrl**.
     * @return $this
     */
    public function setUberTripBrandingText($uber_trip_branding_text)
    {
        if (!is_null($uber_trip_branding_text) && (strlen($uber_trip_branding_text) > 28)) {
            throw new \InvalidArgumentException('invalid length for $uber_trip_branding_text when calling Location., must be smaller than or equal to 28.');
        }

        $this->container['uber_trip_branding_text'] = $uber_trip_branding_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
