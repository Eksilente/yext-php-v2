<?php
/**
 * PublisherSuggestion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yext\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yext API
 *
 * 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yext\Client\Model;

use \ArrayAccess;

/**
 * PublisherSuggestion Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Yext\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PublisherSuggestion implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PublisherSuggestion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status' => 'string',
        'original_content' => 'string',
        'date_resolved' => '\DateTime',
        'resolved_by' => 'string',
        'date_created' => '\DateTime',
        'location_id' => 'string',
        'field_name' => 'string',
        'suggested_content' => 'string',
        'publisher_id' => 'string',
        'id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'original_content' => 'originalContent',
        'date_resolved' => 'dateResolved',
        'resolved_by' => 'resolvedBy',
        'date_created' => 'dateCreated',
        'location_id' => 'locationId',
        'field_name' => 'fieldName',
        'suggested_content' => 'suggestedContent',
        'publisher_id' => 'publisherId',
        'id' => 'id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'original_content' => 'setOriginalContent',
        'date_resolved' => 'setDateResolved',
        'resolved_by' => 'setResolvedBy',
        'date_created' => 'setDateCreated',
        'location_id' => 'setLocationId',
        'field_name' => 'setFieldName',
        'suggested_content' => 'setSuggestedContent',
        'publisher_id' => 'setPublisherId',
        'id' => 'setId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'original_content' => 'getOriginalContent',
        'date_resolved' => 'getDateResolved',
        'resolved_by' => 'getResolvedBy',
        'date_created' => 'getDateCreated',
        'location_id' => 'getLocationId',
        'field_name' => 'getFieldName',
        'suggested_content' => 'getSuggestedContent',
        'publisher_id' => 'getPublisherId',
        'id' => 'getId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_WAITING_ON_CUSTOMER = 'WAITING_ON_CUSTOMER';
    const STATUS_ACCEPTED = 'ACCEPTED';
    const STATUS_REJECTED = 'REJECTED';
    const STATUS_EXPIRED = 'EXPIRED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_WAITING_ON_CUSTOMER,
            self::STATUS_ACCEPTED,
            self::STATUS_REJECTED,
            self::STATUS_EXPIRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['original_content'] = isset($data['original_content']) ? $data['original_content'] : null;
        $this->container['date_resolved'] = isset($data['date_resolved']) ? $data['date_resolved'] : null;
        $this->container['resolved_by'] = isset($data['resolved_by']) ? $data['resolved_by'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['field_name'] = isset($data['field_name']) ? $data['field_name'] : null;
        $this->container['suggested_content'] = isset($data['suggested_content']) ? $data['suggested_content'] : null;
        $this->container['publisher_id'] = isset($data['publisher_id']) ? $data['publisher_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["WAITING_ON_CUSTOMER", "ACCEPTED", "REJECTED", "EXPIRED"];
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["WAITING_ON_CUSTOMER", "ACCEPTED", "REJECTED", "EXPIRED"];
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status The status of the suggestion
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('WAITING_ON_CUSTOMER', 'ACCEPTED', 'REJECTED', 'EXPIRED');
        if (!is_null($status) && (!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'WAITING_ON_CUSTOMER', 'ACCEPTED', 'REJECTED', 'EXPIRED'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets original_content
     * @return string
     */
    public function getOriginalContent()
    {
        return $this->container['original_content'];
    }

    /**
     * Sets original_content
     * @param string $original_content The content that the publisher suggested to change
     * @return $this
     */
    public function setOriginalContent($original_content)
    {
        $this->container['original_content'] = $original_content;

        return $this;
    }

    /**
     * Gets date_resolved
     * @return \DateTime
     */
    public function getDateResolved()
    {
        return $this->container['date_resolved'];
    }

    /**
     * Sets date_resolved
     * @param \DateTime $date_resolved The date the suggestion expired or was accepted or rejected
     * @return $this
     */
    public function setDateResolved($date_resolved)
    {
        $this->container['date_resolved'] = $date_resolved;

        return $this;
    }

    /**
     * Gets resolved_by
     * @return string
     */
    public function getResolvedBy()
    {
        return $this->container['resolved_by'];
    }

    /**
     * Sets resolved_by
     * @param string $resolved_by Resolver of the Publisher Suggestion
     * @return $this
     */
    public function setResolvedBy($resolved_by)
    {
        $this->container['resolved_by'] = $resolved_by;

        return $this;
    }

    /**
     * Gets date_created
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param \DateTime $date_created The date Yext received the suggestion
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets location_id
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param string $location_id ID of the location the suggestion is for
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets field_name
     * @return string
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     * @param string $field_name The location field the suggestion is for
     * @return $this
     */
    public function setFieldName($field_name)
    {
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets suggested_content
     * @return string
     */
    public function getSuggestedContent()
    {
        return $this->container['suggested_content'];
    }

    /**
     * Sets suggested_content
     * @param string $suggested_content The content suggested as a replacement of the `originalContent`
     * @return $this
     */
    public function setSuggestedContent($suggested_content)
    {
        $this->container['suggested_content'] = $suggested_content;

        return $this;
    }

    /**
     * Gets publisher_id
     * @return string
     */
    public function getPublisherId()
    {
        return $this->container['publisher_id'];
    }

    /**
     * Sets publisher_id
     * @param string $publisher_id ID of the publisher who submitted the suggestion
     * @return $this
     */
    public function setPublisherId($publisher_id)
    {
        $this->container['publisher_id'] = $publisher_id;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id ID of this Publisher Suggestion
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
