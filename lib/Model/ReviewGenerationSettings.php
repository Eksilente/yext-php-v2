<?php
/**
 * ReviewGenerationSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yext\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yext API
 *
 * 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yext\Client\Model;

use \ArrayAccess;

/**
 * ReviewGenerationSettings Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Yext\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReviewGenerationSettings implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ReviewGenerationSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_contact_frequency' => 'int',
        'max_texts_per_day' => 'int',
        'site_distribution' => 'map[string,object]',
        'balancing_optimization' => 'string',
        'algorithm_configuration' => 'string[]',
        'review_quarantine_days' => 'int',
        'privacy_policy_override' => 'string',
        'max_emails_per_day' => 'int',
        'max_texts_per_month' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'max_contact_frequency' => 'maxContactFrequency',
        'max_texts_per_day' => 'maxTextsPerDay',
        'site_distribution' => 'siteDistribution',
        'balancing_optimization' => 'balancingOptimization',
        'algorithm_configuration' => 'algorithmConfiguration',
        'review_quarantine_days' => 'reviewQuarantineDays',
        'privacy_policy_override' => 'privacyPolicyOverride',
        'max_emails_per_day' => 'maxEmailsPerDay',
        'max_texts_per_month' => 'maxTextsPerMonth'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'max_contact_frequency' => 'setMaxContactFrequency',
        'max_texts_per_day' => 'setMaxTextsPerDay',
        'site_distribution' => 'setSiteDistribution',
        'balancing_optimization' => 'setBalancingOptimization',
        'algorithm_configuration' => 'setAlgorithmConfiguration',
        'review_quarantine_days' => 'setReviewQuarantineDays',
        'privacy_policy_override' => 'setPrivacyPolicyOverride',
        'max_emails_per_day' => 'setMaxEmailsPerDay',
        'max_texts_per_month' => 'setMaxTextsPerMonth'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'max_contact_frequency' => 'getMaxContactFrequency',
        'max_texts_per_day' => 'getMaxTextsPerDay',
        'site_distribution' => 'getSiteDistribution',
        'balancing_optimization' => 'getBalancingOptimization',
        'algorithm_configuration' => 'getAlgorithmConfiguration',
        'review_quarantine_days' => 'getReviewQuarantineDays',
        'privacy_policy_override' => 'getPrivacyPolicyOverride',
        'max_emails_per_day' => 'getMaxEmailsPerDay',
        'max_texts_per_month' => 'getMaxTextsPerMonth'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const BALANCING_OPTIMIZATION_DISTRIBUTION = 'DISTRIBUTION';
    const BALANCING_OPTIMIZATION_MORE_REVIEWS = 'MORE_REVIEWS';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBalancingOptimizationAllowableValues()
    {
        return [
            self::BALANCING_OPTIMIZATION_DISTRIBUTION,
            self::BALANCING_OPTIMIZATION_MORE_REVIEWS,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_contact_frequency'] = isset($data['max_contact_frequency']) ? $data['max_contact_frequency'] : null;
        $this->container['max_texts_per_day'] = isset($data['max_texts_per_day']) ? $data['max_texts_per_day'] : null;
        $this->container['site_distribution'] = isset($data['site_distribution']) ? $data['site_distribution'] : null;
        $this->container['balancing_optimization'] = isset($data['balancing_optimization']) ? $data['balancing_optimization'] : null;
        $this->container['algorithm_configuration'] = isset($data['algorithm_configuration']) ? $data['algorithm_configuration'] : null;
        $this->container['review_quarantine_days'] = isset($data['review_quarantine_days']) ? $data['review_quarantine_days'] : null;
        $this->container['privacy_policy_override'] = isset($data['privacy_policy_override']) ? $data['privacy_policy_override'] : null;
        $this->container['max_emails_per_day'] = isset($data['max_emails_per_day']) ? $data['max_emails_per_day'] : null;
        $this->container['max_texts_per_month'] = isset($data['max_texts_per_month']) ? $data['max_texts_per_month'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['max_texts_per_day']) && ($this->container['max_texts_per_day'] > 20.0)) {
            $invalid_properties[] = "invalid value for 'max_texts_per_day', must be smaller than or equal to 20.0.";
        }

        if (!is_null($this->container['max_texts_per_day']) && ($this->container['max_texts_per_day'] < 1.0)) {
            $invalid_properties[] = "invalid value for 'max_texts_per_day', must be bigger than or equal to 1.0.";
        }

        $allowed_values = ["DISTRIBUTION", "MORE_REVIEWS"];
        if (!is_null($this->container['balancing_optimization']) && !in_array($this->container['balancing_optimization'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'balancing_optimization', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['review_quarantine_days']) && ($this->container['review_quarantine_days'] > 7.0)) {
            $invalid_properties[] = "invalid value for 'review_quarantine_days', must be smaller than or equal to 7.0.";
        }

        if (!is_null($this->container['review_quarantine_days']) && ($this->container['review_quarantine_days'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'review_quarantine_days', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['max_emails_per_day']) && ($this->container['max_emails_per_day'] > 200.0)) {
            $invalid_properties[] = "invalid value for 'max_emails_per_day', must be smaller than or equal to 200.0.";
        }

        if (!is_null($this->container['max_emails_per_day']) && ($this->container['max_emails_per_day'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'max_emails_per_day', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['max_texts_per_month']) && ($this->container['max_texts_per_month'] < 1.0)) {
            $invalid_properties[] = "invalid value for 'max_texts_per_month', must be bigger than or equal to 1.0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['max_texts_per_day'] > 20.0) {
            return false;
        }
        if ($this->container['max_texts_per_day'] < 1.0) {
            return false;
        }
        $allowed_values = ["DISTRIBUTION", "MORE_REVIEWS"];
        if (!is_null($this->container['balancing_optimization']) && !in_array($this->container['balancing_optimization'], $allowed_values)) {
            return false;
        }
        if ($this->container['review_quarantine_days'] > 7.0) {
            return false;
        }
        if ($this->container['review_quarantine_days'] < 0.0) {
            return false;
        }
        if ($this->container['max_emails_per_day'] > 200.0) {
            return false;
        }
        if ($this->container['max_emails_per_day'] < 0.0) {
            return false;
        }
        if ($this->container['max_texts_per_month'] < 1.0) {
            return false;
        }
        return true;
    }


    /**
     * Gets max_contact_frequency
     * @return int
     */
    public function getMaxContactFrequency()
    {
        return $this->container['max_contact_frequency'];
    }

    /**
     * Sets max_contact_frequency
     * @param int $max_contact_frequency If null is provided, no maximum contact frequency will be enforced.
     * @return $this
     */
    public function setMaxContactFrequency($max_contact_frequency)
    {
        $this->container['max_contact_frequency'] = $max_contact_frequency;

        return $this;
    }

    /**
     * Gets max_texts_per_day
     * @return int
     */
    public function getMaxTextsPerDay()
    {
        return $this->container['max_texts_per_day'];
    }

    /**
     * Sets max_texts_per_day
     * @param int $max_texts_per_day If null is provided, review invitations by text will be disabled.
     * @return $this
     */
    public function setMaxTextsPerDay($max_texts_per_day)
    {

        if (!is_null($max_texts_per_day) && ($max_texts_per_day > 20.0)) {
            throw new \InvalidArgumentException('invalid value for $max_texts_per_day when calling ReviewGenerationSettings., must be smaller than or equal to 20.0.');
        }
        if (!is_null($max_texts_per_day) && ($max_texts_per_day < 1.0)) {
            throw new \InvalidArgumentException('invalid value for $max_texts_per_day when calling ReviewGenerationSettings., must be bigger than or equal to 1.0.');
        }

        $this->container['max_texts_per_day'] = $max_texts_per_day;

        return $this;
    }

    /**
     * Gets site_distribution
     * @return map[string,object]
     */
    public function getSiteDistribution()
    {
        return $this->container['site_distribution'];
    }

    /**
     * Sets site_distribution
     * @param map[string,object] $site_distribution NOTE: First retrieve sites via the Publishers: List endpoint. Valid sites will have REVIEW MONITORING returned in the feature array.
     * @return $this
     */
    public function setSiteDistribution($site_distribution)
    {
        $this->container['site_distribution'] = $site_distribution;

        return $this;
    }

    /**
     * Gets balancing_optimization
     * @return string
     */
    public function getBalancingOptimization()
    {
        return $this->container['balancing_optimization'];
    }

    /**
     * Sets balancing_optimization
     * @param string $balancing_optimization Must include one of these choices:  * **`DISTRIBUTION`**: The balancing algorithm will prefer following the weighting distribution outlined in Target Distribution of Reviews by Site, even if this means sending users to sites they are not logged into. * **`MORE_REVIEWS`**: The balancing algorithm will attempt to generate as many reviews as possible by sending users to sites they are logged into, even if this means less closely following the distribution.
     * @return $this
     */
    public function setBalancingOptimization($balancing_optimization)
    {
        $allowed_values = array('DISTRIBUTION', 'MORE_REVIEWS');
        if (!is_null($balancing_optimization) && (!in_array($balancing_optimization, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'balancing_optimization', must be one of 'DISTRIBUTION', 'MORE_REVIEWS'");
        }
        $this->container['balancing_optimization'] = $balancing_optimization;

        return $this;
    }

    /**
     * Gets algorithm_configuration
     * @return string[]
     */
    public function getAlgorithmConfiguration()
    {
        return $this->container['algorithm_configuration'];
    }

    /**
     * Sets algorithm_configuration
     * @param string[] $algorithm_configuration Must include zero or more of these choices:  * **`WEBSITE`**: Generate more first party reviews when a 1-star review is visible on the first page, that is, within the last five reviews. * **`RATING`**: Focus on selected sites that have a rating significantly below the location average. * **`RECENCY`**: Ensure each selected site has one review within the last month.
     * @return $this
     */
    public function setAlgorithmConfiguration($algorithm_configuration)
    {
        $this->container['algorithm_configuration'] = $algorithm_configuration;

        return $this;
    }

    /**
     * Gets review_quarantine_days
     * @return int
     */
    public function getReviewQuarantineDays()
    {
        return $this->container['review_quarantine_days'];
    }

    /**
     * Sets review_quarantine_days
     * @param int $review_quarantine_days Prevents 1st party reviews from immediately showing up on your website or wherever else they may appear. During this quarantine period, users may respond to reviews, increasing the likelihood consumers revise or remove their negative reviews. This may be set to at most 7 days.
     * @return $this
     */
    public function setReviewQuarantineDays($review_quarantine_days)
    {

        if (!is_null($review_quarantine_days) && ($review_quarantine_days > 7.0)) {
            throw new \InvalidArgumentException('invalid value for $review_quarantine_days when calling ReviewGenerationSettings., must be smaller than or equal to 7.0.');
        }
        if (!is_null($review_quarantine_days) && ($review_quarantine_days < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $review_quarantine_days when calling ReviewGenerationSettings., must be bigger than or equal to 0.0.');
        }

        $this->container['review_quarantine_days'] = $review_quarantine_days;

        return $this;
    }

    /**
     * Gets privacy_policy_override
     * @return string
     */
    public function getPrivacyPolicyOverride()
    {
        return $this->container['privacy_policy_override'];
    }

    /**
     * Sets privacy_policy_override
     * @param string $privacy_policy_override Update request must contain a URL or null. Null indicates that the Yext privacy policy default will be used.
     * @return $this
     */
    public function setPrivacyPolicyOverride($privacy_policy_override)
    {
        $this->container['privacy_policy_override'] = $privacy_policy_override;

        return $this;
    }

    /**
     * Gets max_emails_per_day
     * @return int
     */
    public function getMaxEmailsPerDay()
    {
        return $this->container['max_emails_per_day'];
    }

    /**
     * Sets max_emails_per_day
     * @param int $max_emails_per_day Must contain an integer value between 0 and 200. If 0 or null is provided, review invitations by email will be disabled.
     * @return $this
     */
    public function setMaxEmailsPerDay($max_emails_per_day)
    {

        if (!is_null($max_emails_per_day) && ($max_emails_per_day > 200.0)) {
            throw new \InvalidArgumentException('invalid value for $max_emails_per_day when calling ReviewGenerationSettings., must be smaller than or equal to 200.0.');
        }
        if (!is_null($max_emails_per_day) && ($max_emails_per_day < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $max_emails_per_day when calling ReviewGenerationSettings., must be bigger than or equal to 0.0.');
        }

        $this->container['max_emails_per_day'] = $max_emails_per_day;

        return $this;
    }

    /**
     * Gets max_texts_per_month
     * @return int
     */
    public function getMaxTextsPerMonth()
    {
        return $this->container['max_texts_per_month'];
    }

    /**
     * Sets max_texts_per_month
     * @param int $max_texts_per_month If null is provided, the system enforced maximum will act as the enabled max.
     * @return $this
     */
    public function setMaxTextsPerMonth($max_texts_per_month)
    {

        if (!is_null($max_texts_per_month) && ($max_texts_per_month < 1.0)) {
            throw new \InvalidArgumentException('invalid value for $max_texts_per_month when calling ReviewGenerationSettings., must be bigger than or equal to 1.0.');
        }

        $this->container['max_texts_per_month'] = $max_texts_per_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
